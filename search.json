[{"path":"/articles/vignette_01_GCN_inference.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Gene coexpression network inference","text":"date, several packages developed infer gene coexpression networks expression data, WGCNA (Langfelder Horvath 2008), CEMiTool (Russo et al. 2018) petal (Petereit et al. 2016). However, network inference analysis non-trivial task requires solid statistical background, especially data preprocessing proper interpretation results. , inexperienced researchers often struggle choose suitable algorithms projects. Besides, different packages required step standard network analysis, distinct syntaxes can hinder interoperability packages, particularly non-advanced R users. , developed --one R package uses state---art algorithms facilitate workflow biological network analysis, data acquisition analysis interpretation. likely accelerate network analysis pipelines advance systems biology research.","code":""},{"path":"/articles/vignette_01_GCN_inference.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Gene coexpression network inference","text":"","code":"if(!requireNamespace('BiocManager', quietly = TRUE))   install.packages('BiocManager')  BiocManager::install(\"BioNERO\") # Load package after installation library(BioNERO) ##  set.seed(123) # for reproducibility"},{"path":"/articles/vignette_01_GCN_inference.html","id":"data-loading-and-preprocessing","dir":"Articles","previous_headings":"","what":"Data loading and preprocessing","title":"Gene coexpression network inference","text":"tutorial, use maize (Zea mays) gene expression data normalized TPM. data obtained Shin et al. (2020) filtered package size issues. information data set, see ?zma.se. data set stored SummarizedExperiment object.1 input expression data BioNERO can SummarizedExperiment object gene expression matrix data frame genes rows samples columns. However, strongly recommend using SummarizedExperiment objects easier interoperability Bioconductor packages.","code":"data(zma.se)  # Take a quick look at the data zma.se ## class: SummarizedExperiment  ## dim: 10802 28  ## metadata(0): ## assays(1): '' ## rownames(10802): ZeamMp030 ZeamMp044 ... Zm00001d054106 Zm00001d054107 ## rowData names(0): ## colnames(28): SRX339756 SRX339757 ... SRX2792103 SRX2792104 ## colData names(1): Tissue SummarizedExperiment::colData(zma.se) ## DataFrame with 28 rows and 1 column ##                    Tissue ##               <character> ## SRX339756       endosperm ## SRX339757       endosperm ## SRX339758       endosperm ## SRX339762       endosperm ## SRX339763       endosperm ## ...                   ... ## SRX2792107 whole_seedling ## SRX2792108 whole_seedling ## SRX2792102 whole_seedling ## SRX2792103 whole_seedling ## SRX2792104 whole_seedling"},{"path":"/articles/vignette_01_GCN_inference.html","id":"step-by-step-data-preprocessing","dir":"Articles","previous_headings":"Data loading and preprocessing","what":"Step-by-step data preprocessing","title":"Gene coexpression network inference","text":"section suitable users want control data analysis, can inspect data set preprocessing step analyze different options arguments affect expression data. want quick start, can skip next section (Automatic, one-step data preprocessing). Step 1: Replacing missing values. default, replace_na() replace NAs 0. Users can also replace NAs mean row (generally advisable, can useful specific cases). Step 2: Removing non-expressed genes. , faster network reconstruction, remove every gene whose median value 10. function’s default min_exp 1. options, see ?remove_nonexp. Step 3 (optional): Filtering genes variance. reasonable remove genes whose expression values vary much across samples, since often want find genes less expressed particular conditions. , keep top 2000 variable genes. Users can also filter percentile (e.g., top 10% variable genes). Step 4: Removing outlying samples. several methods remove outliers. implemented Z.K (standardized connectivity) method (Oldham, Langfelder, Horvath 2012) ZKfiltering(), network-based approach remove outliers. method proven suitable network analysis, since can remove outliers methods (hierarchical clustering) identify. default, BioNERO considers samples ZK < 2 outliers, parameter flexible users want change . Step 5: Adjusting confounding artifacts. important step avoid spurious correlations resulting confounders. method described Parsana et al. (2019), developed principal component (PC)-based correction confounders. correction, expression data quantile normalized, every gene follows approximate normal distribution.","code":"exp_filt <- replace_na(zma.se) sum(is.na(zma.se)) ## [1] 0 exp_filt <- remove_nonexp(exp_filt, method = \"median\", min_exp = 10) dim(exp_filt) ## [1] 8529   28 exp_filt <- filter_by_variance(exp_filt, n = 2000) dim(exp_filt) ## [1] 2000   28 exp_filt <- ZKfiltering(exp_filt, cor_method = \"pearson\") ## Number of removed samples: 1 dim(exp_filt) ## [1] 2000   27 exp_filt <- PC_correction(exp_filt)"},{"path":"/articles/vignette_01_GCN_inference.html","id":"automatic-one-step-data-preprocessing","dir":"Articles","previous_headings":"Data loading and preprocessing","what":"Automatic, one-step data preprocessing","title":"Gene coexpression network inference","text":"Alternatively, users can preprocess data single function. function exp_preprocess() wrapper functions replace_na(), remove_nonexp(), filter_by_variance(), ZKfiltering() PC_correction(). arguments passed exp_preprocess() used functions generate filtered expression data frame single step.2","code":"final_exp <- exp_preprocess(     zma.se, min_exp = 10, variance_filter = TRUE, n = 2000 ) ## Number of removed samples: 1 identical(dim(exp_filt), dim(final_exp)) ## [1] TRUE  # Take a look at the final data final_exp ## class: SummarizedExperiment  ## dim: 2000 27  ## metadata(0): ## assays(1): '' ## rownames(2000): ZeamMp030 ZeamMp092 ... Zm00001d054093 Zm00001d054107 ## rowData names(0): ## colnames(27): SRX339756 SRX339757 ... SRX2792103 SRX2792104 ## colData names(1): Tissue"},{"path":"/articles/vignette_01_GCN_inference.html","id":"exploratory-data-analysis","dir":"Articles","previous_headings":"","what":"Exploratory data analysis","title":"Gene coexpression network inference","text":"BioNERO includes functions easy data exploration. functions created avoid type code chunks , although small, used many times. idea make user experience biological network analysis easy simple possible. Plotting heatmaps: function plot_heatmap() plots heatmaps correlations samples gene expression single line. Users can use preferred RColorBrewer’s palette, hide/show gene names, activate/deactivate clustering rows /columns.   Principal component analysis (PCA): function plot_PCA() performs PCA plots PC1 vs PC2 (default), well percentage variance explained PC. Users can also choose plot PC1 vs PC3 PC2 vs PC3.","code":"# Heatmap of sample correlations p <- plot_heatmap(final_exp, type = \"samplecor\") p # Heatmap of gene expression p <- plot_heatmap(final_exp, type = \"expr\") p plot_PCA(final_exp)"},{"path":"/articles/vignette_01_GCN_inference.html","id":"gene-coexpression-network-inference","dir":"Articles","previous_headings":"","what":"Gene coexpression network inference","title":"Gene coexpression network inference","text":"Now filtered normalized expression data, can reconstruct gene coexpression network (GCN) WGCNA algorithm (Langfelder Horvath 2008). First , need identify suitable \\(\\beta\\) power makes network satisfy scale-free topology. function SFT_fit(). Correlation values raised power \\(\\beta\\) amplify distances , hence, make module detection algorithm powerful. higher value \\(\\beta\\), closer scale-free topology network . However, high \\(\\beta\\) power reduces mean connectivity, desired. solve trade-, pick lowest \\(\\beta\\) power certain threshold (default SFT_fit(), 0.8). makes network close scale-free topology without dramatically reducing mean connectivity. can see, optimal power 9. However, strongly recommend visual inspection simulation different \\(\\beta\\) powers, WGCNA can fail return appropriate \\(\\beta\\) power cases.3 function SFT_fit() automatically saves ggplot object second element resulting list. visualize , simply access plot.  Now, can use power calculated SFT_fit() infer GCN. function exp2gcn() infers GCN outputs list 7 elements, used functions analysis pipeline. function exp2gcn() saves objects last element resulting list can subsequently used plot common figures GCN papers. figures publication-ready display . dendrogram genes modules; ii. heatmap pairwise correlations module eigengenes.   Let’s see number genes per module.","code":"sft <- SFT_fit(final_exp, net_type = \"signed hybrid\", cor_method = \"pearson\") ##    Power SFT.R.sq  slope truncated.R.sq mean.k. median.k. max.k. ## 1      3    0.220 -0.218          0.178   278.0    303.00  598.0 ## 2      4    0.416 -0.382          0.272   196.0    199.00  472.0 ## 3      5    0.573 -0.468          0.462   145.0    136.00  381.0 ## 4      6    0.675 -0.536          0.584   110.0     95.70  312.0 ## 5      7    0.748 -0.584          0.676    86.3     70.00  259.0 ## 6      8    0.791 -0.653          0.735    68.8     51.90  221.0 ## 7      9    0.803 -0.717          0.761    55.8     38.60  191.0 ## 8     10    0.815 -0.775          0.790    45.8     29.90  167.0 ## 9     11    0.821 -0.828          0.815    38.1     22.90  147.0 ## 10    12    0.838 -0.874          0.850    32.0     17.90  130.0 ## 11    13    0.847 -0.913          0.876    27.2     14.30  116.0 ## 12    14    0.856 -0.943          0.893    23.2     11.80  104.0 ## 13    15    0.875 -0.973          0.913    20.0      9.79   93.0 ## 14    16    0.892 -0.997          0.937    17.3      8.00   83.9 ## 15    17    0.897 -1.020          0.941    15.1      6.75   76.0 ## 16    18    0.891 -1.070          0.948    13.3      5.79   69.7 ## 17    19    0.888 -1.100          0.950    11.7      4.96   64.2 ## 18    20    0.888 -1.130          0.957    10.4      4.27   59.4 sft$power ## [1] 9 power <- sft$power sft$plot net <- exp2gcn(     final_exp, net_type = \"signed hybrid\", SFTpower = power,      cor_method = \"pearson\" ) ## ..connectivity.. ## ..matrix multiplication (system BLAS).. ## ..normalization.. ## ..done. names(net) ## [1] \"adjacency_matrix\"    \"MEs\"                 \"genes_and_modules\"   ## [4] \"kIN\"                 \"correlation_matrix\"  \"params\"              ## [7] \"dendro_plot_objects\" # Dendro and colors plot_dendro_and_colors(net) ## NULL # Eigengene networks plot_eigengene_network(net) ## NULL plot_ngenes_per_module(net)"},{"path":"/articles/vignette_01_GCN_inference.html","id":"gene-coexpression-network-analysis","dir":"Articles","previous_headings":"","what":"Gene coexpression network analysis","title":"Gene coexpression network inference","text":"Now coexpression network, can start exploring properties.","code":""},{"path":"/articles/vignette_01_GCN_inference.html","id":"assessing-module-stability","dir":"Articles","previous_headings":"Gene coexpression network analysis","what":"Assessing module stability","title":"Gene coexpression network inference","text":"function module_stability() allows users check identified coexpression modules stable (.e., can resist removal particular sample). function resample data set rerun module detection algorithm n times (default: 30) return PDF figure displaying gene dendrogram colors representing modules identified run. looking figure, can detect particular module found small fraction runs, suggests instability. , perform 5 resampling runs demonstration purposes.4","code":"module_stability(final_exp, net, nRuns = 5) ##  ...working on run 1 .. ##  ...working on run 2 .. ##  ...working on run 3 .. ##  ...working on run 4 .. ##  ...working on run 5 .. ##  ...working on run 6 .. ## NULL"},{"path":"/articles/vignette_01_GCN_inference.html","id":"module-trait-associations","dir":"Articles","previous_headings":"Gene coexpression network analysis","what":"Module-trait associations","title":"Gene coexpression network inference","text":"function module_trait_cor() can used calculate module-trait correlations. analysis useful identify modules positively negatively correlated particular traits, means gene expression levels go conditions. , tissues considered traits, want identify groups genes whose expression levels inhibited induced particular tissues. Alternatively, one can use continuous variables (e.g., metabolite content, protein concentration, height) discrete variables (e.g., disease index) traits.5  function module_trait_cor() also allows plot customization. instance:","code":"MEtrait <- module_trait_cor(     exp = final_exp, MEs = net$MEs, cor_method = \"pearson\" ) head(MEtrait) ##        ME          trait         cor    pvalue ## 1 MEblack      endosperm  0.12925374 0.5205188 ## 2 MEblack         pollen  0.11154977 0.5796226 ## 3 MEblack whole_seedling -0.20119355 0.3142702 ## 4 MEbrown      endosperm -0.02538113 0.8999982 ## 5 MEbrown         pollen  0.06199200 0.7587116 ## 6 MEbrown whole_seedling -0.02607732 0.8972693 # Transpose the matrix and change palette (RColorBrewer palette) MEtrait <- module_trait_cor(     exp = final_exp,      MEs = net$MEs,      cor_method = \"pearson\",      transpose = TRUE, palette = \"PRGn\",      cex.text = 0.7, cex.lab.y = 0.7 )"},{"path":"/articles/vignette_01_GCN_inference.html","id":"visualizing-module-expression-profile","dir":"Articles","previous_headings":"Gene coexpression network analysis","what":"Visualizing module expression profile","title":"Gene coexpression network inference","text":"heatmap shows genes yellow module negatively correlated endosperm samples. can visually explore plot_expression_profile().","code":"plot_expression_profile(     exp = final_exp,      net = net,      plot_module = TRUE,      modulename = \"yellow\" )"},{"path":"/articles/vignette_01_GCN_inference.html","id":"enrichment-analysis","dir":"Articles","previous_headings":"Gene coexpression network analysis","what":"Enrichment analysis","title":"Gene coexpression network inference","text":"identifying modules inhibited enhanced particular tissues, users likely want find biological processes (e.g., GO biological process) pathways (e.g., Reactome, KEGG, MapMan) genes related. can done enrichment analyses, can uncover terms found expected chance module. easiest way accomplish use function module_enrichment(), performs enrichment analysis modules . illustrate , scan coexpression modules enriched protein domains using genes network background. Interpro annotation downloaded PLAZA 4.0 Monocots database (Van Bel et al. 2018). can see, two modules enriched genes particular protein domains. get result function enrichment_analysis(), performs enrichment analysis user-defined gene set instead modules. 6","code":"# Enrichment analysis for conserved protein domains (Interpro) data(zma.interpro) interpro_enrichment <- module_enrichment(     net = net,      background_genes = rownames(final_exp),     annotation = zma.interpro ) ## Enrichment analysis for module black... ## Enrichment analysis for module brown... ## Enrichment analysis for module darkgreen... ## Enrichment analysis for module darkolivegreen... ## Enrichment analysis for module greenyellow... ## Enrichment analysis for module lightyellow... ## Enrichment analysis for module midnightblue... ## Enrichment analysis for module paleturquoise... ## Enrichment analysis for module violet... ## Enrichment analysis for module yellow...  # Print results without geneIDs for better visualization interpro_enrichment[, -6] ##                                       TermID genes all         pval ## 809                             Histone-fold    58  60 1.083394e-11 ## 802                       Histone H2A/H2B/H3    43  44 2.155952e-09 ## 1877     Translation protein SH3-like domain    22  22 8.872064e-06 ## 1878 Translation protein, beta-barrel domain    26  27 1.235834e-05 ## 1394           Ribosomal protein L2 domain 2    18  18 7.448332e-05 ## 186                    Aquaporin transporter     3   5 9.644015e-05 ## 187                           Aquaporin-like     3   5 9.644015e-05 ## 906                  Major intrinsic protein     3   5 9.644015e-05 ## 907  Major intrinsic protein, conserved site     3   5 9.644015e-05 ##              padj       Module ## 809  2.178705e-08        black ## 802  2.167810e-06        black ## 1877 5.947240e-03        black ## 1878 6.213155e-03        black ## 1394 2.995719e-02        black ## 186  4.848528e-02 midnightblue ## 187  4.848528e-02 midnightblue ## 906  4.848528e-02 midnightblue ## 907  4.848528e-02 midnightblue"},{"path":"/articles/vignette_01_GCN_inference.html","id":"hub-gene-identification","dir":"Articles","previous_headings":"Gene coexpression network analysis","what":"Hub gene identification","title":"Gene coexpression network inference","text":"Hub genes often identified using two different metrics: module membership (MM) (.e., correlation gene module eigengene) degree (.e., sum connection weights gene genes module). researchers consider top 10% genes highest degree hubs, others consider MM > 0.8. avoid false positives, BioNERO’s algorithm combines metrics defines hub genes top 10% genes highest degree MM > 0.8. Hubs can identified function get_hubs_gcn().","code":"hubs <- get_hubs_gcn(final_exp, net) head(hubs) ##             Gene Module  kWithin ## 1 Zm00001d033147  black 188.3864 ## 2 Zm00001d049790  black 181.4522 ## 3 Zm00001d005649  black 180.7062 ## 4 Zm00001d045448  black 180.6744 ## 5 Zm00001d008203  black 178.7147 ## 6 Zm00001d023340  black 177.7553"},{"path":"/articles/vignette_01_GCN_inference.html","id":"extracting-subgraphs","dir":"Articles","previous_headings":"Gene coexpression network analysis","what":"Extracting subgraphs","title":"Gene coexpression network inference","text":"Subgraph extraction can particularly useful visualize specific modules, can done function get_edge_list(). function returns subgraph edge list. Users can also extract edge list particular gene set instead module. function get_edge_list() returns fully connected subgraph specified module gene set. However, filtering weak correlations desirable can accomplished setting argument filter = TRUE, remove edges based one optimal scale-free topology fit (default), p-value, Z-score, arbitrary minimum correlation coefficient. 7 details details, check ?get_edge_list().","code":"edges <- get_edge_list(net, module=\"midnightblue\") head(edges) ##              Gene1          Gene2    Weight ## 45  Zm00001d001857 Zm00001d002384 0.9401886 ## 89  Zm00001d001857 Zm00001d002690 0.9675345 ## 90  Zm00001d002384 Zm00001d002690 0.9185426 ## 133 Zm00001d001857 Zm00001d003962 0.7178340 ## 134 Zm00001d002384 Zm00001d003962 0.6534956 ## 135 Zm00001d002690 Zm00001d003962 0.6840004 # Remove edges based on optimal scale-free topology fit edges_filtered <- get_edge_list(net, module = \"midnightblue\", filter = TRUE) ## The correlation threshold that best fits the scale-free topology is 0.7 dim(edges_filtered) ## [1] 588   3  # Remove edges based on p-value edges_filtered <- get_edge_list(     net, module = \"midnightblue\",     filter = TRUE, method = \"pvalue\",      nSamples = ncol(final_exp) ) dim(edges_filtered) ## [1] 921   3  # Remove edges based on minimum correlation edges_filtered <- get_edge_list(     net, module = \"midnightblue\",      filter = TRUE, method = \"min_cor\", rcutoff = 0.7 ) dim(edges_filtered) ## [1] 588   3"},{"path":"/articles/vignette_01_GCN_inference.html","id":"network-visualization","dir":"Articles","previous_headings":"Gene coexpression network analysis","what":"Network visualization","title":"Gene coexpression network inference","text":"now edge list module, let’s visualize function plot_gcn(). default, function labels top 5 hubs (less less 5 hubs). However, can customized according user’s preference (see ?plot_gcn information).  Networks can also visualized interactively setting interactive = TRUE plot_gcn.","code":"plot_gcn(     edgelist_gcn = edges_filtered,      net = net,      color_by = \"module\",      hubs = hubs ) plot_gcn(     edgelist_gcn = edges_filtered,      net = net,     color_by = \"module\",     hubs = hubs,     interactive = TRUE,     dim_interactive = c(500, 500) )"},{"path":"/articles/vignette_01_GCN_inference.html","id":"network-statistics","dir":"Articles","previous_headings":"Gene coexpression network analysis","what":"Network statistics","title":"Gene coexpression network inference","text":"Finally, function net_stats() can used calculate main network statistics (properties, indices), namely: connectivity, scaled connectivity, clustering coefficient, maximum adjacency ratio, density, centralization, heterogeneity, diameter, betweenness (optional), closeness (optional). Depending system capacities network size, may take long time. Hence, willing calculate network statistics data set, grab cup coffee, waiting may long.","code":""},{"path":"/articles/vignette_01_GCN_inference.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Gene coexpression network inference","text":"vignette created following conditions:","code":"sessionInfo() ## R version 4.2.1 (2022-06-23) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.4 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] BioNERO_1.7.1    BiocStyle_2.24.0 ##  ## loaded via a namespace (and not attached): ##   [1] backports_1.4.1             circlize_0.4.15             ##   [3] Hmisc_5.0-1                 systemfonts_1.0.4           ##   [5] plyr_1.8.8                  igraph_1.4.1                ##   [7] splines_4.2.1               GENIE3_1.18.0               ##   [9] BiocParallel_1.30.4         GenomeInfoDb_1.32.4         ##  [11] ggnetwork_0.5.12            ggplot2_3.4.1               ##  [13] sva_3.44.0                  digest_0.6.31               ##  [15] foreach_1.5.2               htmltools_0.5.4             ##  [17] GO.db_3.15.0                fansi_1.0.4                 ##  [19] magrittr_2.0.3              checkmate_2.1.0             ##  [21] memoise_2.0.1               cluster_2.1.4               ##  [23] doParallel_1.0.17           limma_3.52.4                ##  [25] annotate_1.74.0             ComplexHeatmap_2.12.1       ##  [27] fastcluster_1.2.3           Biostrings_2.64.1           ##  [29] matrixStats_0.63.0          pkgdown_2.0.7               ##  [31] colorspace_2.1-0            blob_1.2.4                  ##  [33] ggrepel_0.9.3               textshaping_0.3.6           ##  [35] xfun_0.37                   dplyr_1.1.0                 ##  [37] crayon_1.5.2                RCurl_1.98-1.10             ##  [39] jsonlite_1.8.4              genefilter_1.78.0           ##  [41] impute_1.70.0               survival_3.5-5              ##  [43] iterators_1.0.14            glue_1.6.2                  ##  [45] gtable_0.3.3                zlibbioc_1.42.0             ##  [47] XVector_0.36.0              GetoptLong_1.0.5            ##  [49] DelayedArray_0.22.0         shape_1.4.6                 ##  [51] BiocGenerics_0.42.0         abind_1.4-5                 ##  [53] scales_1.2.1                edgeR_3.38.4                ##  [55] DBI_1.1.3                   Rcpp_1.0.10                 ##  [57] xtable_1.8-4                htmlTable_2.4.1             ##  [59] clue_0.3-64                 foreign_0.8-84              ##  [61] bit_4.0.5                   preprocessCore_1.58.0       ##  [63] Formula_1.2-5               stats4_4.2.1                ##  [65] htmlwidgets_1.6.2           httr_1.4.5                  ##  [67] RColorBrewer_1.1-3          ellipsis_0.3.2              ##  [69] farver_2.1.1                XML_3.99-0.14               ##  [71] pkgconfig_2.0.3             nnet_7.3-18                 ##  [73] sass_0.4.5                  locfit_1.5-9.7              ##  [75] utf8_1.2.3                  dynamicTreeCut_1.63-1       ##  [77] labeling_0.4.2              tidyselect_1.2.0            ##  [79] rlang_1.1.0                 reshape2_1.4.4              ##  [81] AnnotationDbi_1.58.0        munsell_0.5.0               ##  [83] tools_4.2.1                 cachem_1.0.7                ##  [85] cli_3.6.0                   generics_0.1.3              ##  [87] RSQLite_2.3.0               statnet.common_4.8.0        ##  [89] evaluate_0.20               stringr_1.5.0               ##  [91] fastmap_1.1.1               yaml_2.3.7                  ##  [93] ragg_1.2.5                  RhpcBLASctl_0.23-42         ##  [95] knitr_1.42                  bit64_4.0.5                 ##  [97] fs_1.6.1                    purrr_1.0.1                 ##  [99] KEGGREST_1.36.3             nlme_3.1-162                ## [101] compiler_4.2.1              rstudioapi_0.14             ## [103] png_0.1-8                   minet_3.54.0                ## [105] tibble_3.2.1                statmod_1.5.0               ## [107] bslib_0.4.2                 stringi_1.7.12              ## [109] highr_0.10                  desc_1.4.2                  ## [111] lattice_0.20-45             Matrix_1.5-3                ## [113] vctrs_0.6.0                 pillar_1.8.1                ## [115] lifecycle_1.0.3             networkD3_0.4               ## [117] BiocManager_1.30.20         jquerylib_0.1.4             ## [119] GlobalOptions_0.1.2         data.table_1.14.8           ## [121] bitops_1.0-7                patchwork_1.1.2             ## [123] GenomicRanges_1.48.0        R6_2.5.1                    ## [125] bookdown_0.33               network_1.18.1              ## [127] gridExtra_2.3               IRanges_2.30.1              ## [129] codetools_0.2-19            SummarizedExperiment_1.26.1 ## [131] rprojroot_2.0.3             rjson_0.2.21                ## [133] withr_2.5.0                 S4Vectors_0.34.0            ## [135] GenomeInfoDbData_1.2.8      intergraph_2.0-2            ## [137] mgcv_1.8-42                 parallel_4.2.1              ## [139] grid_4.2.1                  rpart_4.1.19                ## [141] NetRep_1.2.6                coda_0.19-4                 ## [143] rmarkdown_2.20              MatrixGenerics_1.8.1        ## [145] ggnewscale_0.4.8            Biobase_2.56.0              ## [147] WGCNA_1.72-1                base64enc_0.1-3"},{"path":[]},{"path":"/articles/vignette_02_GRN_inference.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Gene regulatory network inference","text":"","code":"if(!requireNamespace('BiocManager', quietly = TRUE))   install.packages('BiocManager')  BiocManager::install(\"BioNERO\") # Load package after installation library(BioNERO) ##  set.seed(123) # for reproducibility"},{"path":"/articles/vignette_02_GRN_inference.html","id":"introduction-and-algorithm-description","dir":"Articles","previous_headings":"","what":"Introduction and algorithm description","title":"Gene regulatory network inference","text":"previous vignette, explored aspects gene coexpression networks (GCNs), represented undirected weighted graphs. undirected , given link gene gene B, can say genes coexpressed, know whether gene controls gene B otherwise. , weighted means coexpression relationships gene pairs stronger others. vignette, demonstrate infer gene regulatory networks (GRNs) expression data BioNERO. GRNs display interactions regulators (e.g., transcription factors miRNAs) targets (e.g., genes). Hence, represented directed unweighted graphs. Numerous algorithms developed infer GRNs expression data. However, algorithm performances highly dependent benchmark data set. solve uncertainty, Marbach et al. (2012) proposed application “wisdom crowds” principle GRN inference. approach consists inferring GRNs different algorithms, ranking interactions identified method, calculating average rank interaction across algorithms used. way, can consensus, high-confidence edges used biological interpretations. , BioNERO implements three popular algorithms: GENIE3 (Huynh-Thu et al. 2010), ARACNE (Margolin et al. 2006) CLR (Faith et al. 2007).","code":""},{"path":"/articles/vignette_02_GRN_inference.html","id":"data-preprocessing","dir":"Articles","previous_headings":"","what":"Data preprocessing","title":"Gene regulatory network inference","text":"inferring GRN, preprocess expression data way previous vignette.","code":"# Load example data set data(zma.se)  # Preprocess the expression data final_exp <- exp_preprocess(     zma.se,      min_exp = 10,      variance_filter = TRUE,      n = 2000 ) ## Number of removed samples: 1"},{"path":"/articles/vignette_02_GRN_inference.html","id":"gene-regulatory-network-inference","dir":"Articles","previous_headings":"","what":"Gene regulatory network inference","title":"Gene regulatory network inference","text":"BioNERO requires 2 objects GRN inference: expression data (SummarizedExperiment, matrix data frame) character vector regulators (transcription factors miRNAs). transcription factors used vignette downloaded PlantTFDB 4.0 (Jin et al. 2017).","code":"data(zma.tfs) head(zma.tfs) ##              Gene Family ## 6  Zm00001d022525    Dof ## 25 Zm00001d037605   GATA ## 28 Zm00001d049540    NAC ## 45 Zm00001d042287    MYB ## 46 Zm00001d042288    NAC ## 54 Zm00001d039371    TCP"},{"path":"/articles/vignette_02_GRN_inference.html","id":"consensus-grn-inference","dir":"Articles","previous_headings":"Gene regulatory network inference","what":"Consensus GRN inference","title":"Gene regulatory network inference","text":"Inferring GRNs based wisdom crowds principle can done single function: exp2grn(). function infer GRNs GENIE3, ARACNE CLR, calculate average ranks interaction filter resulting network based optimal scale-free topology (SFT) fit. filtering step, n different networks created subsetting top n quantiles. instance, network 10,000 edges given input nsplit = 10, 10 different networks created: first 1,000 edges, second 2,000 edges, , last network original input network. , network, function calculate SFT fit select best fit.","code":"# Using 10 trees for demonstration purposes. Use the default: 1000 grn <- exp2grn(     exp = final_exp,      regulators = zma.tfs$Gene,      nTrees = 10 ) ## The top number of edges that best fits the scale-free topology is 247 head(grn) ##          Regulator         Target ## 290 Zm00001d041474 Zm00001d018986 ## 280 Zm00001d041474 Zm00001d006602 ## 281 Zm00001d041474 Zm00001d006942 ## 325 Zm00001d044315 Zm00001d043497 ## 65  Zm00001d013777 Zm00001d046996 ## 252 Zm00001d038832 Zm00001d021147"},{"path":"/articles/vignette_02_GRN_inference.html","id":"algorithm-specific-grn-inference","dir":"Articles","previous_headings":"Gene regulatory network inference","what":"Algorithm-specific GRN inference","title":"Gene regulatory network inference","text":"section directed users , reason (e.g., comparison, exploration), want infer GRNs particular algorithms. available algorithms : GENIE3: regression-tree based algorithm decomposes prediction GRNs n genes n regression problems. regression problem, expression profile target gene predicted expression profiles genes using random forests (default) extra-trees. ARACNE: information-theoretic algorithm aims remove indirect interactions inferred coexpression. CLR: extension relevance networks algorithm uses mutual information identify regulatory interactions. Users can also infer GRNs 3 algorithms using function exp_combined(). resulting edge lists stored list 3 elements. 1","code":"# Using 10 trees for demonstration purposes. Use the default: 1000 genie3 <- grn_infer(     final_exp,      method = \"genie3\",      regulators = zma.tfs$Gene,      nTrees = 10) head(genie3) ##                Node1          Node2    Weight ## 20352 Zm00001d041474 Zm00001d017881 0.5439514 ## 41340 Zm00001d034751 Zm00001d037111 0.5322394 ## 13037 Zm00001d034751 Zm00001d012407 0.4348469 ## 13207 Zm00001d045323 Zm00001d012513 0.4203583 ## 55378 Zm00001d028432 Zm00001d048693 0.4071160 ## 50200 Zm00001d013777 Zm00001d044212 0.3957483 dim(genie3) ## [1] 60136     3 aracne <- grn_infer(final_exp, method = \"aracne\", regulators = zma.tfs$Gene) head(aracne) ##                Node1          Node2   Weight ## 23861 Zm00001d038832 Zm00001d021147 1.789818 ## 1758  Zm00001d038832 Zm00001d000432 1.692232 ## 11337 Zm00001d038832 Zm00001d011086 1.692232 ## 27014 Zm00001d011139 Zm00001d024274 1.674840 ## 51070 Zm00001d011139 Zm00001d045069 1.658043 ## 28387 Zm00001d038832 Zm00001d025784 1.641802 dim(aracne) ## [1] 411   3 clr <- grn_infer(final_exp, method = \"clr\", regulators = zma.tfs$Gene) head(clr) ##                Node1          Node2   Weight ## 26302 Zm00001d046937 Zm00001d023376 12.70216 ## 11267 Zm00001d046937 Zm00001d011080 12.25336 ## 12540 Zm00001d041474 Zm00001d012007 10.74023 ## 51019 Zm00001d042263 Zm00001d045042 10.50925 ## 17810 Zm00001d041474 Zm00001d015811 10.33216 ## 29278 Zm00001d046937 Zm00001d026632 10.20075 dim(clr) ## [1] 26657     3 grn_list <- grn_combined(final_exp, regulators = zma.tfs$Gene, nTrees = 10) head(grn_list$genie3) ##                Node1          Node2    Weight ## 12013 Zm00001d041474 Zm00001d011541 0.4629469 ## 30418 Zm00001d046568 Zm00001d027841 0.4289222 ## 33403 Zm00001d041474 Zm00001d030748 0.4140894 ## 6910  Zm00001d044315 Zm00001d006725 0.4103733 ## 22057 Zm00001d041474 Zm00001d018986 0.4020641 ## 45153 Zm00001d034751 Zm00001d039733 0.3935705 head(grn_list$aracne) ##                Node1          Node2   Weight ## 23861 Zm00001d038832 Zm00001d021147 1.789818 ## 1758  Zm00001d038832 Zm00001d000432 1.692232 ## 11337 Zm00001d038832 Zm00001d011086 1.692232 ## 27014 Zm00001d011139 Zm00001d024274 1.674840 ## 51070 Zm00001d011139 Zm00001d045069 1.658043 ## 28387 Zm00001d038832 Zm00001d025784 1.641802 head(grn_list$clr) ##                Node1          Node2   Weight ## 26302 Zm00001d046937 Zm00001d023376 12.70216 ## 11267 Zm00001d046937 Zm00001d011080 12.25336 ## 12540 Zm00001d041474 Zm00001d012007 10.74023 ## 51019 Zm00001d042263 Zm00001d045042 10.50925 ## 17810 Zm00001d041474 Zm00001d015811 10.33216 ## 29278 Zm00001d046937 Zm00001d026632 10.20075"},{"path":"/articles/vignette_02_GRN_inference.html","id":"gene-regulatory-network-analysis","dir":"Articles","previous_headings":"","what":"Gene regulatory network analysis","title":"Gene regulatory network inference","text":"inferring GRN, BioNERO allows users perform common downstream analyses.","code":""},{"path":"/articles/vignette_02_GRN_inference.html","id":"hub-gene-identification","dir":"Articles","previous_headings":"Gene regulatory network analysis","what":"Hub gene identification","title":"Gene regulatory network inference","text":"GRN hubs defined top 10% highly connected regulators, percentile flexible BioNERO.2 can identified get_hubs_grn().","code":"hubs <- get_hubs_grn(grn) hubs ##              Gene Degree ## 1  Zm00001d038832     16 ## 2  Zm00001d041474     13 ## 3  Zm00001d046937     13 ## 4  Zm00001d011139     12 ## 5  Zm00001d052229     11 ## 6  Zm00001d013777     10 ## 7  Zm00001d039989     10 ## 8  Zm00001d038227     10 ## 9  Zm00001d030617     10 ## 10 Zm00001d044315      9 ## 11 Zm00001d003822      9 ## 12 Zm00001d020020      9 ## 13 Zm00001d046568      9 ## 14 Zm00001d010227      9 ## 15 Zm00001d025339      8 ## 16 Zm00001d028974      8 ## 17 Zm00001d042267      7 ## 18 Zm00001d014377      7 ## 19 Zm00001d054038      6 ## 20 Zm00001d042263      6 ## 21 Zm00001d035440      6 ## 22 Zm00001d036148      6 ## 23 Zm00001d031655      6 ## 24 Zm00001d034751      6 ## 25 Zm00001d018081      6 ## 26 Zm00001d027957      5"},{"path":"/articles/vignette_02_GRN_inference.html","id":"network-visualization","dir":"Articles","previous_headings":"Gene regulatory network analysis","what":"Network visualization","title":"Gene regulatory network inference","text":"GRNs can also visualized interactively exploratory purposes. Finally, BioNERO can also used visualization hub identification protein-protein (PPI) interaction networks. functions get_hubs_ppi() plot_ppi() work way equivalents GRNs (get_hubs_grn() plot_grn()).","code":"plot_grn(grn) plot_grn(grn, interactive = TRUE, dim_interactive = c(500,500))"},{"path":"/articles/vignette_02_GRN_inference.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Gene regulatory network inference","text":"vignette created following conditions:","code":"sessionInfo() ## R version 4.2.1 (2022-06-23) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.4 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] BioNERO_1.7.1    BiocStyle_2.24.0 ##  ## loaded via a namespace (and not attached): ##   [1] backports_1.4.1             circlize_0.4.15             ##   [3] Hmisc_5.0-1                 systemfonts_1.0.4           ##   [5] plyr_1.8.8                  igraph_1.4.1                ##   [7] splines_4.2.1               GENIE3_1.18.0               ##   [9] BiocParallel_1.30.4         GenomeInfoDb_1.32.4         ##  [11] ggnetwork_0.5.12            ggplot2_3.4.1               ##  [13] sva_3.44.0                  digest_0.6.31               ##  [15] foreach_1.5.2               htmltools_0.5.4             ##  [17] GO.db_3.15.0                fansi_1.0.4                 ##  [19] magrittr_2.0.3              checkmate_2.1.0             ##  [21] memoise_2.0.1               cluster_2.1.4               ##  [23] doParallel_1.0.17           limma_3.52.4                ##  [25] annotate_1.74.0             ComplexHeatmap_2.12.1       ##  [27] fastcluster_1.2.3           Biostrings_2.64.1           ##  [29] matrixStats_0.63.0          pkgdown_2.0.7               ##  [31] colorspace_2.1-0            blob_1.2.4                  ##  [33] ggrepel_0.9.3               textshaping_0.3.6           ##  [35] xfun_0.37                   dplyr_1.1.0                 ##  [37] crayon_1.5.2                RCurl_1.98-1.10             ##  [39] jsonlite_1.8.4              genefilter_1.78.0           ##  [41] impute_1.70.0               survival_3.5-5              ##  [43] iterators_1.0.14            glue_1.6.2                  ##  [45] gtable_0.3.3                zlibbioc_1.42.0             ##  [47] XVector_0.36.0              GetoptLong_1.0.5            ##  [49] DelayedArray_0.22.0         shape_1.4.6                 ##  [51] BiocGenerics_0.42.0         abind_1.4-5                 ##  [53] scales_1.2.1                edgeR_3.38.4                ##  [55] DBI_1.1.3                   Rcpp_1.0.10                 ##  [57] xtable_1.8-4                htmlTable_2.4.1             ##  [59] clue_0.3-64                 foreign_0.8-84              ##  [61] bit_4.0.5                   preprocessCore_1.58.0       ##  [63] Formula_1.2-5               stats4_4.2.1                ##  [65] htmlwidgets_1.6.2           httr_1.4.5                  ##  [67] RColorBrewer_1.1-3          ellipsis_0.3.2              ##  [69] farver_2.1.1                XML_3.99-0.14               ##  [71] pkgconfig_2.0.3             nnet_7.3-18                 ##  [73] sass_0.4.5                  locfit_1.5-9.7              ##  [75] utf8_1.2.3                  dynamicTreeCut_1.63-1       ##  [77] labeling_0.4.2              tidyselect_1.2.0            ##  [79] rlang_1.1.0                 reshape2_1.4.4              ##  [81] AnnotationDbi_1.58.0        munsell_0.5.0               ##  [83] tools_4.2.1                 cachem_1.0.7                ##  [85] cli_3.6.0                   generics_0.1.3              ##  [87] RSQLite_2.3.0               statnet.common_4.8.0        ##  [89] evaluate_0.20               stringr_1.5.0               ##  [91] fastmap_1.1.1               yaml_2.3.7                  ##  [93] ragg_1.2.5                  RhpcBLASctl_0.23-42         ##  [95] knitr_1.42                  bit64_4.0.5                 ##  [97] fs_1.6.1                    purrr_1.0.1                 ##  [99] KEGGREST_1.36.3             nlme_3.1-162                ## [101] compiler_4.2.1              rstudioapi_0.14             ## [103] png_0.1-8                   minet_3.54.0                ## [105] tibble_3.2.1                statmod_1.5.0               ## [107] bslib_0.4.2                 stringi_1.7.12              ## [109] highr_0.10                  desc_1.4.2                  ## [111] lattice_0.20-45             Matrix_1.5-3                ## [113] vctrs_0.6.0                 pillar_1.8.1                ## [115] lifecycle_1.0.3             networkD3_0.4               ## [117] BiocManager_1.30.20         jquerylib_0.1.4             ## [119] GlobalOptions_0.1.2         data.table_1.14.8           ## [121] bitops_1.0-7                patchwork_1.1.2             ## [123] GenomicRanges_1.48.0        R6_2.5.1                    ## [125] bookdown_0.33               network_1.18.1              ## [127] gridExtra_2.3               IRanges_2.30.1              ## [129] codetools_0.2-19            SummarizedExperiment_1.26.1 ## [131] rprojroot_2.0.3             rjson_0.2.21                ## [133] withr_2.5.0                 S4Vectors_0.34.0            ## [135] GenomeInfoDbData_1.2.8      intergraph_2.0-2            ## [137] mgcv_1.8-42                 parallel_4.2.1              ## [139] grid_4.2.1                  rpart_4.1.19                ## [141] NetRep_1.2.6                coda_0.19-4                 ## [143] rmarkdown_2.20              MatrixGenerics_1.8.1        ## [145] ggnewscale_0.4.8            Biobase_2.56.0              ## [147] WGCNA_1.72-1                base64enc_0.1-3"},{"path":[]},{"path":"/articles/vignette_03_network_comparison.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Network comparison: consensus modules and module preservation","text":"","code":"if(!requireNamespace('BiocManager', quietly = TRUE))   install.packages('BiocManager')  BiocManager::install(\"BioNERO\") # Load package after installation library(BioNERO) ##  set.seed(12) # for reproducibility"},{"path":"/articles/vignette_03_network_comparison.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Network comparison: consensus modules and module preservation","text":"Comparing different coexpression networks can reveal relevant biological patterns. instance, seeking consensus modules can identify coexpression modules occur data sets regardless natural variation , hence, core players studied phenotype. Additionally, module preservation within across species can reveal patterns conservation divergence transcriptomes. vignette, explore consensus modules module preservation analyses BioNERO. Although seem similar, goals opposite: consensus modules identification focuses commonalities, module preservation focuses divergences.","code":""},{"path":"/articles/vignette_03_network_comparison.html","id":"data-loading-and-description","dir":"Articles","previous_headings":"","what":"Data loading and description","title":"Network comparison: consensus modules and module preservation","text":"use RNA-seq data maize (Zea mays) rice (Oryza sativa) obtained Shin et al. (2020). BioNERO’s functions consensus modules module preservation analyses require expression data list. element list can SummarizedExperiment object (recommended) expression data frame genes row names samples column names.","code":"data(zma.se) zma.se ## class: SummarizedExperiment  ## dim: 10802 28  ## metadata(0): ## assays(1): '' ## rownames(10802): ZeamMp030 ZeamMp044 ... Zm00001d054106 Zm00001d054107 ## rowData names(0): ## colnames(28): SRX339756 SRX339757 ... SRX2792103 SRX2792104 ## colData names(1): Tissue  data(osa.se) osa.se ## class: SummarizedExperiment  ## dim: 7647 27  ## metadata(0): ## assays(1): '' ## rownames(7647): Os01g0100700 Os01g0100900 ... Os12g0641400 Os12g0641500 ## rowData names(0): ## colnames(27): SRX831140 SRX831141 ... SRX263041 SRX1544234 ## colData names(1): Tissue"},{"path":"/articles/vignette_03_network_comparison.html","id":"consensus-modules","dir":"Articles","previous_headings":"","what":"Consensus modules","title":"Network comparison: consensus modules and module preservation","text":"common objective consensus modules identification find core modules across different tissues treatments species. instance, one can infer GCNs different types cancer human tissues (say prostate liver) identify modules occur sets, likely core components cancer biology. Likewise, one can also identify consensus modules across samples different geographical origins find modules affected population structure kinship.","code":""},{"path":"/articles/vignette_03_network_comparison.html","id":"data-preprocessing","dir":"Articles","previous_headings":"Consensus modules","what":"Data preprocessing","title":"Network comparison: consensus modules and module preservation","text":", subset 22 random samples maize data twice find consensus modules two sets.","code":"# Preprocess data and keep top 2000 genes with highest variances filt_zma <- exp_preprocess(zma.se, variance_filter = TRUE, n = 2000) ## Number of removed samples: 1  # Create different subsets by resampling data zma_set1 <- filt_zma[, sample(colnames(filt_zma), size=22, replace=FALSE)] zma_set2 <- filt_zma[, sample(colnames(filt_zma), size=22, replace=FALSE)] colnames(zma_set1) ##  [1] \"SRX3804716\" \"SRX2792102\" \"SRX2527287\" \"SRX2792108\" \"SRX3804723\" ##  [6] \"SRX2792107\" \"SRX2792103\" \"SRX2792104\" \"SRX3804715\" \"SRX339808\"  ## [11] \"SRX339758\"  \"SRX339756\"  \"SRX339809\"  \"SRX2792105\" \"SRX339757\"  ## [16] \"SRX2641029\" \"SRX339762\"  \"SRX2792110\" \"SRX339807\"  \"SRX3804718\" ## [21] \"ERX2154032\" \"SRX339764\" colnames(zma_set2) ##  [1] \"SRX2792111\" \"SRX339756\"  \"SRX3804715\" \"SRX2792108\" \"SRX2792103\" ##  [6] \"SRX339762\"  \"SRX339807\"  \"ERX2154030\" \"SRX2792105\" \"SRX2792107\" ## [11] \"SRX2527287\" \"ERX2154032\" \"SRX2792104\" \"SRX2527288\" \"SRX339809\"  ## [16] \"SRX3804718\" \"SRX3804716\" \"SRX2792109\" \"SRX3804723\" \"SRX2792102\" ## [21] \"SRX339808\"  \"SRX339758\"  # Create list zma_list <- list(set1 = zma_set1, set2 = zma_set2) length(zma_list) ## [1] 2"},{"path":"/articles/vignette_03_network_comparison.html","id":"identification-of-consensus-modules","dir":"Articles","previous_headings":"Consensus modules","what":"Identification of consensus modules","title":"Network comparison: consensus modules and module preservation","text":"described first vignette, inferring GCNs, need identify optimal \\(\\beta\\) power makes network closer scale-free topology. can consensus_SFT_fit(). function returns list optimal powers summary plot, exactly SFT_fit() .  Now, can infer GCNs identify consensus modules across data sets. Finally, can correlate consensus module eigengenes sample metadata (, plant tissues).1  Users can also transpose heatmap module_trait_cor().","code":"cons_sft <- consensus_SFT_fit(zma_list, setLabels = c(\"Maize 1\", \"Maize 2\"),                               cor_method = \"pearson\") ##    Power SFT.R.sq  slope truncated.R.sq mean.k. median.k. max.k. ## 1      5    0.658 -0.650          0.656  107.00     90.50  304.0 ## 2      6    0.761 -0.706          0.774   79.70     62.90  244.0 ## 3      7    0.833 -0.757          0.863   61.30     45.10  200.0 ## 4      8    0.825 -0.830          0.868   48.30     32.80  169.0 ## 5      9    0.822 -0.916          0.887   38.70     24.50  145.0 ## 6     10    0.838 -0.975          0.910   31.50     18.90  126.0 ## 7     11    0.824 -1.040          0.914   26.00     15.00  111.0 ## 8     12    0.837 -1.090          0.932   21.70     12.20   97.6 ## 9     13    0.851 -1.130          0.944   18.30     10.10   86.6 ## 10    14    0.842 -1.190          0.941   15.50      8.42   77.3 ## 11    15    0.844 -1.230          0.947   13.30      7.17   69.4 ## 12    16    0.842 -1.270          0.951   11.50      6.13   62.5 ## 13    17    0.855 -1.300          0.962    9.99      5.24   56.5 ## 14    18    0.864 -1.320          0.967    8.73      4.54   51.3 ## 15    19    0.869 -1.330          0.970    7.67      3.92   46.7 ## 16    20    0.875 -1.340          0.977    6.78      3.38   42.7 ##    Power SFT.R.sq  slope truncated.R.sq mean.k. median.k. max.k. ## 1      5    0.592 -0.621          0.574   94.70     82.40  265.0 ## 2      6    0.702 -0.666          0.710   69.90     56.80  209.0 ## 3      7    0.757 -0.713          0.771   53.20     40.30  167.0 ## 4      8    0.829 -0.729          0.853   41.50     29.50  136.0 ## 5      9    0.855 -0.782          0.884   32.90     22.10  113.0 ## 6     10    0.868 -0.826          0.911   26.60     17.20   96.6 ## 7     11    0.873 -0.868          0.931   21.80     13.70   83.2 ## 8     12    0.837 -0.943          0.914   18.10     11.30   73.0 ## 9     13    0.826 -1.000          0.917   15.20      9.30   64.7 ## 10    14    0.815 -1.070          0.917   12.80      7.73   57.6 ## 11    15    0.810 -1.120          0.926   11.00      6.53   51.5 ## 12    16    0.823 -1.150          0.943    9.42      5.45   46.3 ## 13    17    0.815 -1.210          0.942    8.16      4.57   41.8 ## 14    18    0.827 -1.240          0.954    7.11      3.92   37.8 ## 15    19    0.833 -1.260          0.964    6.23      3.42   34.3 ## 16    20    0.831 -1.280          0.965    5.49      2.99   31.2 powers <- cons_sft$power powers ## set1 set2  ##    7    8 cons_sft$plot consensus <- consensus_modules(zma_list, power = powers, cor_method = \"pearson\") ## ..connectivity.. ## ..matrix multiplication (system BLAS).. ## ..normalization.. ## ..done. ## ..connectivity.. ## ..matrix multiplication (system BLAS).. ## ..normalization.. ## ..done. ##  ..done. ##  multiSetMEs: Calculating module MEs. ##    Working on set 1 ... ##    Working on set 2 ... names(consensus) ## [1] \"consModules\"         \"consMEs\"             \"exprSize\"            ## [4] \"sampleInfo\"          \"genes_cmodules\"      \"dendro_plot_objects\" head(consensus$genes_cmodules) ##       Genes Cons_modules ## 1 ZeamMp030    royalblue ## 2 ZeamMp044      darkred ## 3 ZeamMp092      darkred ## 4 ZeamMp108  saddlebrown ## 5 ZeamMp116      darkred ## 6 ZeamMp158  saddlebrown consensus_trait <- consensus_trait_cor(consensus, cor_method = \"pearson\") head(consensus_trait) ##        ME          trait          cor    pvalue ## 1 MEblack      endosperm -0.297224435 0.1815879 ## 2 MEblack         pollen  0.284525339 0.2021641 ## 3 MEblack whole_seedling  0.007301901 0.9746086 ## 4  MEblue      endosperm -0.164695363 0.4687656 ## 5  MEblue         pollen  0.295979347 0.1835410 ## 6  MEblue whole_seedling -0.016437184 0.9428769"},{"path":"/articles/vignette_03_network_comparison.html","id":"module-preservation","dir":"Articles","previous_headings":"","what":"Module preservation","title":"Network comparison: consensus modules and module preservation","text":"Module preservation often used study patterns evolutionary conservation divergence across transcriptomes, approach named phylotranscriptomics. way, one can investigate evolution shaped expression profiles particular gene families across taxa.","code":""},{"path":"/articles/vignette_03_network_comparison.html","id":"data-preprocessing-1","dir":"Articles","previous_headings":"Module preservation","what":"Data preprocessing","title":"Network comparison: consensus modules and module preservation","text":"calculate module preservation statistics, gene IDs must shared expression sets. intraspecies comparisons, easy task, gene IDs . However, interspecies comparisons, users need identify orthogroups different species collapse gene-level expression values orthogroup-level expression values. way, expression sets common row names. recommend identifying orthogroups OrthoFinder (Emms Kelly 2015), simple use widely used.2 , compare maize rice expression profiles. orthogroups species downloaded PLAZA 4.0 Monocots database (Van Bel et al. 2018). can see, orthogroup object BioNERO must data frame orthogroups, species IDs gene IDs, respectively. Let’s collapse gene-level expression orthogroup-level exp_genes2orthogroups(). default, one gene orthogroup given species, expression levels summarized median. Users can also summarize mean. Now, preprocess expression sets keep top 1000 orthogroups highest variances demonstration purposes.","code":"data(og.zma.osa) head(og.zma.osa) ##              Family Species           Gene ## 1548 ORTHO04M000001     osa   Os01g0100700 ## 1549 ORTHO04M000001     osa   Os01g0100900 ## 4824 ORTHO04M000001     zma Zm00001d009743 ## 4854 ORTHO04M000001     zma Zm00001d020834 ## 4874 ORTHO04M000001     zma Zm00001d026672 ## 4921 ORTHO04M000001     zma Zm00001d039873 # Store SummarizedExperiment objects in a list zma_osa_list <- list(osa = osa.se, zma = zma.se)  # Collapse gene-level expression to orthogroup-level ortho_exp <- exp_genes2orthogroups(zma_osa_list, og.zma.osa, summarize = \"mean\")  # Inspect new expression data ortho_exp$osa[1:5, 1:5] ##                SRX831140 SRX831141 SRX831137 SRX831138 SRX831134 ## ORTHO04M000001  6.909420  7.258330  94.20870  92.85195 123.01060 ## ORTHO04M000002  9.203498  8.709974  66.45512  44.97913  33.86936 ## ORTHO04M000003  9.417930  9.444861  42.57513  66.02237  55.37741 ## ORTHO04M000004  9.019436  8.920091  96.22074  62.56506 109.32262 ## ORTHO04M000005 40.845040 41.844234  52.33474  31.31474  22.42236 ortho_exp$zma[1:5, 1:5] ##                SRX339756 SRX339757 SRX339758 SRX339762 SRX339763 ## ORTHO04M000001  26.02510  15.07917  14.91571  13.82989  8.080476 ## ORTHO04M000002  19.28281  13.94254  13.57854  12.96032 13.522525 ## ORTHO04M000003  45.17294  48.63796  54.22404  42.12135 10.779117 ## ORTHO04M000004  28.05475  38.53734  39.48070  27.13272  2.978207 ## ORTHO04M000005  67.58868  34.87009  21.46280  12.79565  7.452068 # Preprocess data and keep top 1000 genes with highest variances ortho_exp <- lapply(ortho_exp, exp_preprocess, variance_filter=TRUE, n=1000) ## Number of removed samples: 2 ## Number of removed samples: 2  # Check orthogroup number sapply(ortho_exp, nrow) ##  osa  zma  ## 1000 1000"},{"path":"/articles/vignette_03_network_comparison.html","id":"calculating-module-preservation-statistics","dir":"Articles","previous_headings":"Module preservation","what":"Calculating module preservation statistics","title":"Network comparison: consensus modules and module preservation","text":"Now row names comparable, can infer GCNs set. iteratively lapply. Initially, module preservation analyses performed WGCNA’s algorithm (Langfelder Horvath 2008). However, summary preservation statistics used WGCNA rely parametric assumptions often met. purpose, NetRep algorithm (Ritchie et al. 2016) accurate WGCNA, uses non-parametric permutation analyses. algorithms implemented BioNERO comparison purposes, strongly recommend using NetRep algorithm. Module preservation analysis can performed single function: module_preservation(). None modules rice preserved maize. can either due small number orthogroups chosen natural biological variation species sampled tissues. can () include orthogroups analyses better view transcriptional conservation species.","code":"# Calculate SFT power power_ortho <- lapply(ortho_exp, SFT_fit, cor_method=\"pearson\") ##    Power SFT.R.sq  slope truncated.R.sq mean.k. median.k. max.k. ## 1      3  0.15600  1.740          0.846  191.00    192.00  249.0 ## 2      4  0.12400  1.080          0.844  129.00    130.00  178.0 ## 3      5  0.10300  0.784          0.817   91.70     92.90  134.0 ## 4      6  0.06140  0.528          0.818   67.80     68.90  106.0 ## 5      7  0.04550  0.397          0.803   51.80     52.60   85.5 ## 6      8  0.02660  0.234          0.840   40.70     40.80   70.7 ## 7      9  0.00989  0.121          0.868   32.60     32.50   59.8 ## 8     10  0.04090 -0.274          0.820   26.70     26.10   53.2 ## 9     11  0.12200 -0.458          0.871   22.20     21.40   47.8 ## 10    12  0.20600 -0.600          0.908   18.80     18.00   43.4 ## 11    13  0.27900 -0.688          0.928   16.00     15.30   39.7 ## 12    14  0.39900 -0.839          0.952   13.80     13.10   36.4 ## 13    15  0.48600 -0.949          0.951   12.10     11.30   33.6 ## 14    16  0.55500 -1.010          0.959   10.60      9.71   31.2 ## 15    17  0.59600 -1.080          0.959    9.39      8.34   29.0 ## 16    18  0.64700 -1.130          0.965    8.37      7.20   27.1 ## 17    19  0.68300 -1.120          0.969    7.50      6.28   25.3 ## 18    20  0.72300 -1.120          0.979    6.76      5.52   23.8 ## No power reached R-squared cut-off, now choosing max R-squared based power ##    Power SFT.R.sq   slope truncated.R.sq mean.k. median.k. max.k. ## 1      3   0.6910  0.7290         0.6260   269.0     284.0  407.0 ## 2      4   0.4540  0.3460         0.3270   199.0     209.0  329.0 ## 3      5   0.0802  0.1070        -0.0486   153.0     158.0  273.0 ## 4      6   0.0459 -0.0746        -0.0302   121.0     123.0  233.0 ## 5      7   0.2620 -0.2140         0.3480    98.1      97.1  201.0 ## 6      8   0.4070 -0.3270         0.4820    80.7      78.1  176.0 ## 7      9   0.5030 -0.4180         0.5960    67.4      63.4  155.0 ## 8     10   0.4930 -0.4950         0.5950    57.0      52.5  138.0 ## 9     11   0.5730 -0.5520         0.6790    48.8      43.8  124.0 ## 10    12   0.5770 -0.6090         0.6860    42.1      37.2  112.0 ## 11    13   0.6560 -0.6500         0.7490    36.7      31.6  101.0 ## 12    14   0.6740 -0.7010         0.7630    32.2      27.5   92.1 ## 13    15   0.7240 -0.7330         0.7930    28.4      23.8   84.2 ## 14    16   0.7800 -0.7460         0.8470    25.3      20.6   77.3 ## 15    17   0.8330 -0.7540         0.9060    22.6      18.0   71.2 ## 16    18   0.8560 -0.7740         0.9200    20.3      15.8   65.7 ## 17    19   0.8690 -0.7870         0.9320    18.3      13.9   60.9 ## 18    20   0.8810 -0.8120         0.9240    16.6      12.3   56.6  # Infer GCNs gcns <- lapply(seq_along(power_ortho), function(n)    exp2gcn(ortho_exp[[n]], SFTpower = power_ortho[[n]]$power,            cor_method = \"pearson\")   ) ## ..connectivity.. ## ..matrix multiplication (system BLAS).. ## ..normalization.. ## ..done. ## ..connectivity.. ## ..matrix multiplication (system BLAS).. ## ..normalization.. ## ..done.  length(gcns) ## [1] 2 # Using rice as reference and maize as test pres <- module_preservation(ortho_exp,                              ref_net = gcns[[1]],                              test_net = gcns[[2]],                              algorithm = \"netrep\") ## [2023-03-23 10:04:56 UTC] Validating user input... ## [2023-03-23 10:04:56 UTC]   Checking matrices for problems... ## [2023-03-23 10:04:56 UTC] Input ok! ## [2023-03-23 10:04:57 UTC] Calculating preservation of network subsets from ##                           dataset \"osa\" in dataset \"zma\". ## [2023-03-23 10:04:57 UTC]   Pre-computing network properties in dataset ##                             \"osa\"... ## [2023-03-23 10:04:57 UTC]   Calculating observed test statistics... ## [2023-03-23 10:04:57 UTC]   Generating null distributions from 1000 ##                             permutations using 1 thread... ##  ##      0% completed.   100% completed. ##  ## [2023-03-23 10:04:58 UTC]   Calculating P-values... ## [2023-03-23 10:04:59 UTC]   Collating results... ## [2023-03-23 10:05:00 UTC] Done! ## 1 modules in osa were preserved in zma: ## NA"},{"path":"/articles/vignette_03_network_comparison.html","id":"identifying-singletons-and-duplicated-genes","dir":"Articles","previous_headings":"","what":"Identifying singletons and duplicated genes","title":"Network comparison: consensus modules and module preservation","text":"Finally, BioNERO can identify singletons duplicated genes is_singleton(). function returns logical vectors indicating input genes singleton .","code":"# Sample 50 random genes genes <- sample(rownames(zma.se), size = 50) is_singleton(genes, og.zma.osa) ## Zm00001d001841 Zm00001d002104 Zm00001d004006 Zm00001d005944 Zm00001d006390  ##           TRUE           TRUE           TRUE           TRUE           TRUE  ## Zm00001d008725 Zm00001d008874 Zm00001d009669 Zm00001d011096 Zm00001d011507  ##           TRUE           TRUE           TRUE           TRUE           TRUE  ## Zm00001d012816 Zm00001d014124 Zm00001d014890 Zm00001d015497 Zm00001d017085  ##           TRUE           TRUE           TRUE           TRUE           TRUE  ## Zm00001d017275 Zm00001d017654 Zm00001d019718 Zm00001d020807 Zm00001d025222  ##           TRUE           TRUE           TRUE           TRUE           TRUE  ## Zm00001d028731 Zm00001d030626 Zm00001d031041 Zm00001d031963 Zm00001d032111  ##           TRUE           TRUE           TRUE           TRUE           TRUE  ## Zm00001d032186 Zm00001d032231 Zm00001d032671 Zm00001d032843 Zm00001d034004  ##           TRUE           TRUE           TRUE           TRUE           TRUE  ## Zm00001d034713 Zm00001d036482 Zm00001d036651 Zm00001d037613 Zm00001d038937  ##           TRUE           TRUE           TRUE           TRUE           TRUE  ## Zm00001d038960 Zm00001d039619 Zm00001d042213 Zm00001d043146 Zm00001d043914  ##           TRUE           TRUE           TRUE           TRUE           TRUE  ## Zm00001d044251 Zm00001d044274 Zm00001d047303 Zm00001d048893 Zm00001d049399  ##           TRUE           TRUE           TRUE           TRUE           TRUE  ## Zm00001d049617 Zm00001d052078 Zm00001d052888 Zm00001d053016 Zm00001d053962  ##           TRUE           TRUE           TRUE           TRUE           TRUE"},{"path":"/articles/vignette_03_network_comparison.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Network comparison: consensus modules and module preservation","text":"vignette created following conditions:","code":"## R version 4.2.1 (2022-06-23) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.4 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] BioNERO_1.7.1    BiocStyle_2.24.0 ##  ## loaded via a namespace (and not attached): ##   [1] backports_1.4.1             circlize_0.4.15             ##   [3] Hmisc_5.0-1                 systemfonts_1.0.4           ##   [5] plyr_1.8.8                  igraph_1.4.1                ##   [7] splines_4.2.1               GENIE3_1.18.0               ##   [9] BiocParallel_1.30.4         GenomeInfoDb_1.32.4         ##  [11] ggnetwork_0.5.12            ggplot2_3.4.1               ##  [13] sva_3.44.0                  digest_0.6.31               ##  [15] foreach_1.5.2               htmltools_0.5.4             ##  [17] GO.db_3.15.0                fansi_1.0.4                 ##  [19] magrittr_2.0.3              checkmate_2.1.0             ##  [21] memoise_2.0.1               cluster_2.1.4               ##  [23] doParallel_1.0.17           limma_3.52.4                ##  [25] annotate_1.74.0             ComplexHeatmap_2.12.1       ##  [27] fastcluster_1.2.3           Biostrings_2.64.1           ##  [29] matrixStats_0.63.0          pkgdown_2.0.7               ##  [31] colorspace_2.1-0            blob_1.2.4                  ##  [33] ggrepel_0.9.3               textshaping_0.3.6           ##  [35] xfun_0.37                   dplyr_1.1.0                 ##  [37] crayon_1.5.2                RCurl_1.98-1.10             ##  [39] jsonlite_1.8.4              genefilter_1.78.0           ##  [41] impute_1.70.0               survival_3.5-5              ##  [43] iterators_1.0.14            glue_1.6.2                  ##  [45] gtable_0.3.3                zlibbioc_1.42.0             ##  [47] XVector_0.36.0              GetoptLong_1.0.5            ##  [49] DelayedArray_0.22.0         shape_1.4.6                 ##  [51] BiocGenerics_0.42.0         abind_1.4-5                 ##  [53] scales_1.2.1                edgeR_3.38.4                ##  [55] DBI_1.1.3                   Rcpp_1.0.10                 ##  [57] xtable_1.8-4                htmlTable_2.4.1             ##  [59] clue_0.3-64                 foreign_0.8-84              ##  [61] bit_4.0.5                   preprocessCore_1.58.0       ##  [63] Formula_1.2-5               stats4_4.2.1                ##  [65] htmlwidgets_1.6.2           httr_1.4.5                  ##  [67] RColorBrewer_1.1-3          farver_2.1.1                ##  [69] XML_3.99-0.14               pkgconfig_2.0.3             ##  [71] nnet_7.3-18                 sass_0.4.5                  ##  [73] locfit_1.5-9.7              utf8_1.2.3                  ##  [75] dynamicTreeCut_1.63-1       labeling_0.4.2              ##  [77] tidyselect_1.2.0            rlang_1.1.0                 ##  [79] reshape2_1.4.4              AnnotationDbi_1.58.0        ##  [81] munsell_0.5.0               tools_4.2.1                 ##  [83] cachem_1.0.7                cli_3.6.0                   ##  [85] generics_0.1.3              RSQLite_2.3.0               ##  [87] statnet.common_4.8.0        evaluate_0.20               ##  [89] stringr_1.5.0               fastmap_1.1.1               ##  [91] yaml_2.3.7                  ragg_1.2.5                  ##  [93] RhpcBLASctl_0.23-42         knitr_1.42                  ##  [95] bit64_4.0.5                 fs_1.6.1                    ##  [97] purrr_1.0.1                 KEGGREST_1.36.3             ##  [99] nlme_3.1-162                compiler_4.2.1              ## [101] rstudioapi_0.14             png_0.1-8                   ## [103] minet_3.54.0                tibble_3.2.1                ## [105] statmod_1.5.0               bslib_0.4.2                 ## [107] stringi_1.7.12              highr_0.10                  ## [109] desc_1.4.2                  lattice_0.20-45             ## [111] Matrix_1.5-3                vctrs_0.6.0                 ## [113] pillar_1.8.1                lifecycle_1.0.3             ## [115] networkD3_0.4               BiocManager_1.30.20         ## [117] jquerylib_0.1.4             GlobalOptions_0.1.2         ## [119] data.table_1.14.8           bitops_1.0-7                ## [121] patchwork_1.1.2             GenomicRanges_1.48.0        ## [123] R6_2.5.1                    bookdown_0.33               ## [125] network_1.18.1              gridExtra_2.3               ## [127] IRanges_2.30.1              codetools_0.2-19            ## [129] SummarizedExperiment_1.26.1 rprojroot_2.0.3             ## [131] rjson_0.2.21                withr_2.5.0                 ## [133] S4Vectors_0.34.0            GenomeInfoDbData_1.2.8      ## [135] intergraph_2.0-2            mgcv_1.8-42                 ## [137] parallel_4.2.1              grid_4.2.1                  ## [139] rpart_4.1.19                NetRep_1.2.6                ## [141] coda_0.19-4                 rmarkdown_2.20              ## [143] MatrixGenerics_1.8.1        ggnewscale_0.4.8            ## [145] Biobase_2.56.0              WGCNA_1.72-1                ## [147] base64enc_0.1-3"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Fabricio Almeida-Silva. Maintainer, author. Thiago Venancio. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Almeida-Silva, F., Venancio, T.M. BioNERO: --one R/Bioconductor package comprehensive easy biological network reconstruction. Funct Integr Genomics 22, 131-136 (2022). https://doi.org/10.1007/s10142-021-00821-9","code":"@Article{,   title = {BioNERO: an all-in-one R/Bioconductor package for comprehensive and easy biological network reconstruction},   author = {Fabricio Almeida-Silva and Thiago M. Venancio},   journal = {Functional And Integrative Genomics},   year = {2022},   volume = {22},   number = {1},   pages = {131-136},   url = {https://link.springer.com/article/10.1007/s10142-021-00821-9},   doi = {10.1007/s10142-021-00821-9}, }"},{"path":"/index.html","id":"bionero-","dir":"","previous_headings":"","what":"Biological Network Reconstruction Omnibus","title":"Biological Network Reconstruction Omnibus","text":"BioNERO aims integrate aspects biological network inference single package, users don’t learn syntaxes several packages communicate among . BioNERO features: Expression data preprocessing using state---art techniques network inference. Automated exploratory data analyses, including principal component analysis (PCA) heatmaps gene expression sample correlations. Inference gene coexpression networks (GCNs) using popular WGCNA algorithm. Inference gene regulatory networks (GRNs) based “wisdom crowds” principle. principle consists inferring GRNs multiple algorithms (, CLR, GENIE3 ARACNE) calculating average rank interaction pair. Exploration network topology GCNs, GRNs, protein-protein interaction networks. Network visualization. Network comparison, including identification consensus modules across independent expression sets, calculation intra interspecies module preservation statistics different networks.","code":""},{"path":"/index.html","id":"installation-instructions","dir":"","previous_headings":"","what":"Installation instructions","title":"Biological Network Reconstruction Omnibus","text":"Get latest stable R release CRAN. install BioNERO Bioconductor using following code: development version GitHub :","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {     install.packages(\"BiocManager\") } BiocManager::install(\"BioNERO\") BiocManager::install(\"almeidasilvaf/BioNERO\")"},{"path":"/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Biological Network Reconstruction Omnibus","text":"citation output using citation('BioNERO') R. Please run check updates cite BioNERO. Please note BioNERO made possible thanks many R bioinformatics software authors, cited either vignettes /paper(s) describing package.","code":"print(citation('BioNERO'), bibtex = TRUE) #  # To cite BioNERO in publications use: #  #   Almeida-Silva, F., Venancio, T.M. BioNERO: an all-in-one #   R/Bioconductor package for comprehensive and easy biological network #   reconstruction. Funct Integr Genomics 22, 131-136 (2022). #   https://doi.org/10.1007/s10142-021-00821-9 #  # A BibTeX entry for LaTeX users is #  #   @Article{, #     title = {BioNERO: an all-in-one R/Bioconductor package for comprehensive and easy biological network reconstruction}, #     author = {Fabricio Almeida-Silva and Thiago M. Venancio}, #     journal = {Functional And Integrative Genomics}, #     year = {2022}, #     volume = {22}, #     number = {1}, #     pages = {131-136}, #     url = {https://link.springer.com/article/10.1007/s10142-021-00821-9}, #     doi = {10.1007/s10142-021-00821-9}, #   }"},{"path":"/reference/PC_correction.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply Principal Component (PC)-based correction for confounding artifacts — PC_correction","title":"Apply Principal Component (PC)-based correction for confounding artifacts — PC_correction","text":"Apply Principal Component (PC)-based correction confounding artifacts","code":""},{"path":"/reference/PC_correction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply Principal Component (PC)-based correction for confounding artifacts — PC_correction","text":"","code":"PC_correction(exp, verbose = FALSE)"},{"path":"/reference/PC_correction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply Principal Component (PC)-based correction for confounding artifacts — PC_correction","text":"exp gene expression data frame genes row names samples column names `SummarizedExperiment` object. verbose Logical indicating whether display progress messages . Default: FALSE.","code":""},{"path":"/reference/PC_correction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply Principal Component (PC)-based correction for confounding artifacts — PC_correction","text":"Corrected expression data frame `SummarizedExperiment` object.","code":""},{"path":"/reference/PC_correction.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Apply Principal Component (PC)-based correction for confounding artifacts — PC_correction","text":"Parsana, P., Ruberman, C., Jaffe, . E., Schatz, M. C., Battle, ., & Leek, J. T. (2019). Addressing confounding artifacts reconstruction gene co-expression networks. Genome biology, 20(1), 1-6.","code":""},{"path":[]},{"path":"/reference/PC_correction.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Apply Principal Component (PC)-based correction for confounding artifacts — PC_correction","text":"Fabricio Almeida-Silva","code":""},{"path":"/reference/PC_correction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply Principal Component (PC)-based correction for confounding artifacts — PC_correction","text":"","code":"data(zma.se) exp <- filter_by_variance(zma.se, n=500) exp <- PC_correction(exp)"},{"path":"/reference/SFT_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Pick power to fit network to a scale-free topology — SFT_fit","title":"Pick power to fit network to a scale-free topology — SFT_fit","text":"Pick power fit network scale-free topology","code":""},{"path":"/reference/SFT_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pick power to fit network to a scale-free topology — SFT_fit","text":"","code":"SFT_fit(exp, net_type = \"signed\", rsquared = 0.8, cor_method = \"spearman\")"},{"path":"/reference/SFT_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pick power to fit network to a scale-free topology — SFT_fit","text":"exp gene expression data frame genes row names samples column names `SummarizedExperiment` object. net_type Network type. One 'signed', 'signed hybrid' 'unsigned'. Default signed. rsquared R squared cutoff. Default 0.8. cor_method Correlation method. One \"pearson\", \"biweight\" \"spearman\". Default \"spearman\".","code":""},{"path":"/reference/SFT_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pick power to fit network to a scale-free topology — SFT_fit","text":"list containing: powerOptimal power based scale-free topology fit plotA ggplot object displaying main statistics SFT fit test","code":""},{"path":[]},{"path":"/reference/SFT_fit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Pick power to fit network to a scale-free topology — SFT_fit","text":"Fabricio Almeida-Silva","code":""},{"path":"/reference/SFT_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pick power to fit network to a scale-free topology — SFT_fit","text":"","code":"data(filt.se) sft <- SFT_fit(filt.se, cor_method = \"pearson\") #> Warning: executing %dopar% sequentially: no parallel backend registered #>    Power SFT.R.sq   slope truncated.R.sq mean.k. median.k. max.k. #> 1      3   0.3340  1.0300        0.18900   145.0     149.0  222.0 #> 2      4   0.2060  0.5420        0.05910   116.0     114.0  195.0 #> 3      5   0.1460  0.3930       -0.00703    96.8      91.3  176.0 #> 4      6   0.0556  0.1930       -0.07170    83.6      74.2  162.0 #> 5      7   0.0209  0.1050       -0.07690    73.7      61.8  151.0 #> 6      8   0.0015 -0.0255       -0.12100    66.0      51.9  142.0 #> 7      9   0.0443 -0.1400       -0.16000    59.8      46.5  134.0 #> 8     10   0.1470 -0.2570       -0.08480    54.7      43.2  127.0 #> 9     11   0.2570 -0.3460        0.04810    50.4      39.7  121.0 #> 10    12   0.3320 -0.3770        0.14800    46.7      36.6  116.0 #> 11    13   0.4520 -0.4400        0.29700    43.5      32.8  111.0 #> 12    14   0.5470 -0.4910        0.41800    40.8      30.1  107.0 #> 13    15   0.5880 -0.5240        0.47300    38.3      27.6  103.0 #> 14    16   0.6870 -0.5470        0.59800    36.1      24.8   99.5 #> 15    17   0.7570 -0.5730        0.68900    34.1      22.9   96.1 #> 16    18   0.8060 -0.5880        0.75100    32.3      21.4   93.0 #> 17    19   0.8350 -0.6170        0.78800    30.7      20.1   90.1 #> 18    20   0.8770 -0.6480        0.84100    29.2      19.3   87.4"},{"path":"/reference/ZKfiltering.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter outlying samples based on the standardized connectivity (Zk) method — ZKfiltering","title":"Filter outlying samples based on the standardized connectivity (Zk) method — ZKfiltering","text":"Filter outlying samples based standardized connectivity (Zk) method","code":""},{"path":"/reference/ZKfiltering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter outlying samples based on the standardized connectivity (Zk) method — ZKfiltering","text":"","code":"ZKfiltering(exp, zk = -2, cor_method = \"spearman\")"},{"path":"/reference/ZKfiltering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter outlying samples based on the standardized connectivity (Zk) method — ZKfiltering","text":"exp gene expression data frame genes row names samples column names `SummarizedExperiment` object. zk Standardized connectivity threshold. Default -2. cor_method Correlation method. One \"pearson\", \"biweight\" \"spearman\". Default \"spearman\".","code":""},{"path":"/reference/ZKfiltering.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter outlying samples based on the standardized connectivity (Zk) method — ZKfiltering","text":"Filtered gene expression data frame `SummarizedExperiment` object.","code":""},{"path":"/reference/ZKfiltering.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Filter outlying samples based on the standardized connectivity (Zk) method — ZKfiltering","text":"Oldham, M. C., Langfelder, P., & Horvath, S. (2012). Network methods describing sample relationships genomic datasets: application Huntington’s disease. BMC systems biology, 6(1), 1-18.","code":""},{"path":[]},{"path":"/reference/ZKfiltering.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Filter outlying samples based on the standardized connectivity (Zk) method — ZKfiltering","text":"Fabricio Almeida-Silva","code":""},{"path":"/reference/ZKfiltering.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter outlying samples based on the standardized connectivity (Zk) method — ZKfiltering","text":"","code":"data(zma.se) filt_exp <- ZKfiltering(zma.se) #> Number of removed samples: 1"},{"path":"/reference/check_SFT.html","id":null,"dir":"Reference","previous_headings":"","what":"Check scale-free topology fit for a given network — check_SFT","title":"Check scale-free topology fit for a given network — check_SFT","text":"Check scale-free topology fit given network","code":""},{"path":"/reference/check_SFT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check scale-free topology fit for a given network — check_SFT","text":"","code":"check_SFT(edgelist, net_type = \"gcn\")"},{"path":"/reference/check_SFT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check scale-free topology fit for a given network — check_SFT","text":"edgelist Edge list data frame containing node 1, node 2 edge weight. net_type Type biological network. One \"gcn\", \"grn\", \"ppi\". Default: gcn.","code":""},{"path":"/reference/check_SFT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check scale-free topology fit for a given network — check_SFT","text":"list SFT fit statistics message indicating network scale-free.","code":""},{"path":"/reference/check_SFT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check scale-free topology fit for a given network — check_SFT","text":"","code":"set.seed(1) exp <- t(matrix(rnorm(10000), ncol=1000, nrow=200)) rownames(exp) <- paste0(\"Gene\", 1:nrow(exp)) colnames(exp) <- paste0(\"Sample\", 1:ncol(exp)) cormat <- cor(t(exp)) edges <- cormat_to_edgelist(cormat) edges <- edges[abs(edges$Weight) > 0.10, ] check_SFT(edges) #> At the 95% confidence level for the Kolmogorov-Smirnov statistic, your graph does not fit the scale-free topology. P-value:0.00364903252406987 #> $continuous #> [1] FALSE #>  #> $alpha #> [1] 9.326825 #>  #> $xmin #> [1] 219 #>  #> $logLik #> [1] -877.4942 #>  #> $KS.stat #> [1] 0.1255631 #>  #> $KS.p #> [1] 0.003649033 #>"},{"path":"/reference/consensus_SFT_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Pick power to fit networks to scale-free topology — consensus_SFT_fit","title":"Pick power to fit networks to scale-free topology — consensus_SFT_fit","text":"Pick power fit networks scale-free topology","code":""},{"path":"/reference/consensus_SFT_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pick power to fit networks to scale-free topology — consensus_SFT_fit","text":"","code":"consensus_SFT_fit(   exp_list,   setLabels = NULL,   metadata = NULL,   cor_method = \"spearman\",   net_type = \"signed hybrid\",   rsquared = 0.8 )"},{"path":"/reference/consensus_SFT_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pick power to fit networks to scale-free topology — consensus_SFT_fit","text":"exp_list list expression data frames SummarizedExperiment objects. input list data frames, row names must correspond gene IDs column names samples. list can created list(exp1, exp2, ..., expn). setLabels Character vector containing labels expression set. metadata data frame containing sample names row names sample annotation first column. Ignored `exp_list` list `SummarizedExperiment` objects, since function extract colData. cor_method Correlation method used network reconstruction. One \"spearman\" (default), \"biweight\", \"pearson\". net_type Network type. One \"signed hybrid\" (default), \"signed\" \"unsigned\". rsquared Minimum R squared consider network similar scale-free topology. Default 0.8.","code":""},{"path":"/reference/consensus_SFT_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pick power to fit networks to scale-free topology — consensus_SFT_fit","text":"list 2 elements: power Numeric vector optimal beta powers fit networks SFT plot ggplot object displaying main statistics SFT fit test","code":""},{"path":"/reference/consensus_SFT_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pick power to fit networks to scale-free topology — consensus_SFT_fit","text":"","code":"set.seed(12) data(zma.se) filt.zma <- filter_by_variance(zma.se, n=500) zma.set1 <- filt.zma[, sample(colnames(filt.zma), size=20, replace=FALSE)] zma.set2 <- filt.zma[, sample(colnames(filt.zma), size=20, replace=FALSE)] list.sets <- list(zma.set1, zma.set2) cons_sft <- consensus_SFT_fit(list.sets, setLabels = c(\"Maize1\", \"Maize2\"),                               cor_method = \"pearson\") #>    Power SFT.R.sq  slope truncated.R.sq mean.k. median.k. max.k. #> 1      5    0.162 -0.241         0.0679    49.8     39.10  120.0 #> 2      6    0.317 -0.353         0.1980    42.9     31.60  109.0 #> 3      7    0.504 -0.441         0.4200    37.7     26.10  101.0 #> 4      8    0.653 -0.529         0.5950    33.5     22.50   93.7 #> 5      9    0.720 -0.598         0.6690    30.2     19.90   87.5 #> 6     10    0.731 -0.656         0.6590    27.4     18.80   82.1 #> 7     11    0.872 -0.686         0.8430    25.1     17.20   77.4 #> 8     12    0.826 -0.721         0.7800    23.1     15.40   73.1 #> 9     13    0.832 -0.739         0.7850    21.4     13.70   69.3 #> 10    14    0.903 -0.737         0.8780    19.9     12.80   65.8 #> 11    15    0.875 -0.756         0.8420    18.6     11.70   62.7 #> 12    16    0.894 -0.764         0.8680    17.4     10.90   59.8 #> 13    17    0.908 -0.756         0.8860    16.4     10.10   57.2 #> 14    18    0.930 -0.761         0.9180    15.4      9.36   54.7 #> 15    19    0.941 -0.762         0.9300    14.6      8.73   52.4 #> 16    20    0.944 -0.764         0.9340    13.8      8.20   50.3 #>    Power SFT.R.sq  slope truncated.R.sq mean.k. median.k. max.k. #> 1      5   0.0693 -0.178         -0.154    59.7      44.3  137.0 #> 2      6   0.1920 -0.282          0.026    51.9      37.8  127.0 #> 3      7   0.3530 -0.378          0.226    45.8      33.3  119.0 #> 4      8   0.4680 -0.453          0.335    40.9      28.6  111.0 #> 5      9   0.6020 -0.530          0.505    36.9      25.6  105.0 #> 6     10   0.6560 -0.596          0.564    33.6      22.3   98.9 #> 7     11   0.7400 -0.664          0.667    30.8      20.1   93.8 #> 8     12   0.7690 -0.699          0.704    28.3      19.1   89.1 #> 9     13   0.8040 -0.747          0.749    26.2      17.5   84.9 #> 10    14   0.8060 -0.781          0.750    24.4      16.1   81.1 #> 11    15   0.8250 -0.792          0.776    22.7      14.8   77.5 #> 12    16   0.8510 -0.822          0.811    21.3      13.6   74.3 #> 13    17   0.8630 -0.816          0.824    20.0      12.5   71.4 #> 14    18   0.8360 -0.847          0.789    18.8      11.5   68.7 #> 15    19   0.8470 -0.867          0.804    17.7      11.0   66.1 #> 16    20   0.8720 -0.884          0.836    16.8      10.2   63.8"},{"path":"/reference/consensus_modules.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify consensus modules across independent data sets — consensus_modules","title":"Identify consensus modules across independent data sets — consensus_modules","text":"Identify consensus modules across independent data sets","code":""},{"path":"/reference/consensus_modules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify consensus modules across independent data sets — consensus_modules","text":"","code":"consensus_modules(   exp_list,   metadata,   power,   cor_method = \"spearman\",   net_type = \"signed hybrid\",   module_merging_threshold = 0.8,   verbose = FALSE )"},{"path":"/reference/consensus_modules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify consensus modules across independent data sets — consensus_modules","text":"exp_list list containing expression data frames genes row names samples column names `SummarizedExperiment` objects. list can created using list(exp1, exp2, ..., expn). metadata data frame containing sample names row names sample annotation first column. Ignored `exp_list` list `SummarizedExperiment` objects, since function extract colData. power Numeric vector beta power expression set calculated consensus_SFT_fit. cor_method Correlation method used network reconstruction. One \"spearman\" (default), \"biweight\", \"pearson\". net_type Network type. One \"signed hybrid\" (default), \"signed\" \"unsigned\". module_merging_threshold Correlation threshold merge similar modules single one. Default: 0.8. verbose Logical indicating whether display progress messages . Default: FALSE.","code":""},{"path":"/reference/consensus_modules.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify consensus modules across independent data sets — consensus_modules","text":"list containing 4 elements: consModules Consensus module assignments consMEs Consensus module eigengenes exprSize Description multi-set object returned function WGCNA::checkSets sampleInfo Metadata expression set genes_cmodules Data frame genes consensus modules dendro_plot_objects Objects used dendrogram plotting","code":""},{"path":[]},{"path":"/reference/consensus_modules.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify consensus modules across independent data sets — consensus_modules","text":"","code":"set.seed(12) data(zma.se) filt.zma <- filter_by_variance(zma.se, n=500) zma.set1 <- filt.zma[, sample(colnames(filt.zma), size=20, replace=FALSE)] zma.set2 <- filt.zma[, sample(colnames(filt.zma), size=20, replace=FALSE)] list.sets <- list(zma.set1, zma.set2) # SFT power previously identified with consensus_SFT_fit() cons_mod <- consensus_modules(list.sets, power = c(11, 13),                               cor_method = \"pearson\") #> ..connectivity.. #> ..matrix multiplication (system BLAS).. #> ..normalization.. #> ..done. #> ..connectivity.. #> ..matrix multiplication (system BLAS).. #> ..normalization.. #> ..done. #>  ..done. #>  multiSetMEs: Calculating module MEs. #>    Working on set 1 ... #>    Working on set 2 ..."},{"path":"/reference/consensus_trait_cor.html","id":null,"dir":"Reference","previous_headings":"","what":"Correlate set-specific modules and consensus modules to sample information — consensus_trait_cor","title":"Correlate set-specific modules and consensus modules to sample information — consensus_trait_cor","text":"Correlate set-specific modules consensus modules sample information","code":""},{"path":"/reference/consensus_trait_cor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correlate set-specific modules and consensus modules to sample information — consensus_trait_cor","text":"","code":"consensus_trait_cor(   consensus,   cor_method = \"spearman\",   continuous_trait = FALSE,   palette = \"RdYlBu\",   cex.lab.x = 0.6,   cex.lab.y = 0.6,   cex.text = 0.6,   transpose = FALSE )"},{"path":"/reference/consensus_trait_cor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correlate set-specific modules and consensus modules to sample information — consensus_trait_cor","text":"consensus Consensus network returned consensus_modules. cor_method Correlation method used. One 'spearman' 'pearson'. Default 'spearman'. continuous_trait Logical indicating trait continuous variable. Default FALSE. palette RColorBrewer's color palette use. Default \"RdYlBu\", palette ranging blue red. cex.lab.x Font size x axis labels. Default: 0.6. cex.lab.y Font size y axis labels. Default: 0.6. cex.text Font size numbers inside matrix. Default: 0.6. transpose Logical indicating whether transpose heatmap . Default FALSE.","code":""},{"path":"/reference/consensus_trait_cor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correlate set-specific modules and consensus modules to sample information — consensus_trait_cor","text":"Data frame consensus module-trait correlations p-values.","code":""},{"path":"/reference/consensus_trait_cor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Correlate set-specific modules and consensus modules to sample information — consensus_trait_cor","text":"Significance levels: 1 asterisk: significant alpha = 0.05. 2 asterisks: significant alpha = 0.01. 3 asterisks: significant alpha = 0.001. asterisk: significant.","code":""},{"path":[]},{"path":"/reference/consensus_trait_cor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Correlate set-specific modules and consensus modules to sample information — consensus_trait_cor","text":"","code":"set.seed(12) data(zma.se) filt.zma <- filter_by_variance(zma.se, n=500) zma.set1 <- filt.zma[, sample(colnames(filt.zma), size=20, replace=FALSE)] zma.set2 <- filt.zma[, sample(colnames(filt.zma), size=20, replace=FALSE)] list.sets <- list(zma.set1, zma.set2) # SFT power previously identified with consensus_SFT_fit() consensus <- consensus_modules(list.sets, power = c(11, 13),                                cor_method = \"pearson\") #> ..connectivity.. #> ..matrix multiplication (system BLAS).. #> ..normalization.. #> ..done. #> ..connectivity.. #> ..matrix multiplication (system BLAS).. #> ..normalization.. #> ..done. #>  ..done. #>  multiSetMEs: Calculating module MEs. #>    Working on set 1 ... #>    Working on set 2 ... consensus_trait <- consensus_trait_cor(consensus, cor_method = \"pearson\")"},{"path":"/reference/cormat_to_edgelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform a correlation matrix to an edge list — cormat_to_edgelist","title":"Transform a correlation matrix to an edge list — cormat_to_edgelist","text":"Transform correlation matrix edge list","code":""},{"path":"/reference/cormat_to_edgelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform a correlation matrix to an edge list — cormat_to_edgelist","text":"","code":"cormat_to_edgelist(matrix)"},{"path":"/reference/cormat_to_edgelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform a correlation matrix to an edge list — cormat_to_edgelist","text":"matrix Symmetrical correlation matrix.","code":""},{"path":"/reference/cormat_to_edgelist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform a correlation matrix to an edge list — cormat_to_edgelist","text":"2-column data frame containing node 1, node 2 edge weight.","code":""},{"path":"/reference/cormat_to_edgelist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform a correlation matrix to an edge list — cormat_to_edgelist","text":"","code":"data(filt.se) cor_mat <- cor(t(SummarizedExperiment::assay(filt.se))) edgelist <- cormat_to_edgelist(cor_mat)"},{"path":"/reference/detect_communities.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect communities in a network — detect_communities","title":"Detect communities in a network — detect_communities","text":"Detect communities network","code":""},{"path":"/reference/detect_communities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect communities in a network — detect_communities","text":"","code":"detect_communities(edgelist, method = igraph::cluster_infomap, directed = TRUE)"},{"path":"/reference/detect_communities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect communities in a network — detect_communities","text":"edgelist Data frame containing network edge list. First column must node 1 second column must node 2. Additional columns interpreted edge attributes modified function. method igraph function used community detection. Available functions cluster_infomap, cluster_edge_betweenness, cluster_fast_greedy, cluster_walktrap, cluster_spinglass, cluster_leading_eigen, cluster_louvain, cluster_label_prop. Default cluster_infomap. directed Logical indicating whether network directed (GRN ) (GCN PPI networks). Default: TRUE.","code":""},{"path":"/reference/detect_communities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect communities in a network — detect_communities","text":"data frame containing node names first column, communities nodes belong second column.","code":""},{"path":[]},{"path":"/reference/detect_communities.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Detect communities in a network — detect_communities","text":"Fabricio Almeida-Silva","code":""},{"path":"/reference/detect_communities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect communities in a network — detect_communities","text":"","code":"data(filt.se) tfs <- sample(rownames(filt.se), size=50, replace=FALSE) grn_edges <- grn_infer(filt.se, method = \"clr\", regulators = tfs) com <- detect_communities(grn_edges, directed=TRUE)"},{"path":"/reference/dfs2one.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine multiple expression tables (.tsv) into a single data frame — dfs2one","title":"Combine multiple expression tables (.tsv) into a single data frame — dfs2one","text":"function reads multiple expression tables (.tsv files) directory combines single gene expression data frame.","code":""},{"path":"/reference/dfs2one.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine multiple expression tables (.tsv) into a single data frame — dfs2one","text":"","code":"dfs2one(mypath, pattern = \".tsv$\")"},{"path":"/reference/dfs2one.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine multiple expression tables (.tsv) into a single data frame — dfs2one","text":"mypath Path directory containing .tsv files. Files must first column common, e.g. \"Gene_ID\". Rows gene IDs columns sample names. pattern Pattern contained expression file. Default '.tsv$', means files ending '.tsv' specified directory considered expression files.","code":""},{"path":"/reference/dfs2one.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine multiple expression tables (.tsv) into a single data frame — dfs2one","text":"Data frame gene IDs row names expression values sample (columns).","code":""},{"path":"/reference/dfs2one.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Combine multiple expression tables (.tsv) into a single data frame — dfs2one","text":"Fabricio Almeida-Silva","code":""},{"path":"/reference/dfs2one.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine multiple expression tables (.tsv) into a single data frame — dfs2one","text":"","code":"# Simulate two expression data frames of 100 genes and 30 samples genes <- paste0(rep(\"Gene\", 100), 1:100) samples1 <- paste0(rep(\"Sample\", 30), 1:30) samples2 <- paste0(rep(\"Sample\", 30), 31:60) exp1 <- cbind(genes, as.data.frame(matrix(rnorm(100*30),nrow=100,ncol=30))) exp2 <- cbind(genes, as.data.frame(matrix(rnorm(100*30),nrow=100,ncol=30))) colnames(exp1) <- c(\"Gene\", samples1) colnames(exp2) <- c(\"Gene\", samples2)  # Write data frames to temporary files tmpdir <- tempdir() tmp1 <- tempfile(tmpdir = tmpdir, fileext = \".exp.tsv\") tmp2 <- tempfile(tmpdir = tmpdir, fileext = \".exp.tsv\") write.table(exp1, file=tmp1, quote=FALSE, sep=\"\\t\") write.table(exp2, file=tmp2, quote=FALSE, sep=\"\\t\")  # Load the files into one exp <- dfs2one(mypath = tmpdir, pattern=\".exp.tsv\")"},{"path":"/reference/enrichment_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform enrichment analysis for a set of genes — enrichment_analysis","title":"Perform enrichment analysis for a set of genes — enrichment_analysis","text":"Perform enrichment analysis set genes","code":""},{"path":"/reference/enrichment_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform enrichment analysis for a set of genes — enrichment_analysis","text":"","code":"enrichment_analysis(   genes,   background_genes,   annotation,   column = NULL,   correction = \"BH\",   p = 0.05,   bp_param = BiocParallel::SerialParam() )"},{"path":"/reference/enrichment_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform enrichment analysis for a set of genes — enrichment_analysis","text":"genes Character vector containing genes overrepresentation analysis. background_genes Character vector genes used background Fisher's Exact Test. annotation Annotation data frame genes first column functional annotation columns. data frame can exported Biomart similar databases. column Column columns annotation used enrichment. character numeric values column indices can used. users want supply one column, input character numeric vector. Default: columns annotation. correction Multiple testing correction method. One \"holm\", \"hochberg\", \"hommel\", \"bonferroni\", \"BH\", \"\", \"fdr\" \"none\". Default \"BH\". p P-value threshold. P-values threshold considered significant. Default 0.05. bp_param BiocParallel back-end used. Default: BiocParallel::SerialParam()","code":""},{"path":"/reference/enrichment_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform enrichment analysis for a set of genes — enrichment_analysis","text":"Data frame containing significant terms, p-values associated genes.","code":""},{"path":"/reference/enrichment_analysis.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Perform enrichment analysis for a set of genes — enrichment_analysis","text":"Fabricio Almeida-Silva","code":""},{"path":"/reference/enrichment_analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform enrichment analysis for a set of genes — enrichment_analysis","text":"","code":"# \\donttest{ data(filt.se) data(zma.interpro) genes <- rownames(filt.se)[1:50] background_genes <- rownames(filt.se) annotation <- zma.interpro # Using p = 1 to show all results enrich <- enrichment_analysis(genes, background_genes, annotation, p = 1) # }"},{"path":"/reference/exp2gcn.html","id":null,"dir":"Reference","previous_headings":"","what":"Reconstruct gene coexpression network from gene expression — exp2gcn","title":"Reconstruct gene coexpression network from gene expression — exp2gcn","text":"Reconstruct gene coexpression network gene expression","code":""},{"path":"/reference/exp2gcn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reconstruct gene coexpression network from gene expression — exp2gcn","text":"","code":"exp2gcn(   exp,   net_type = \"signed\",   module_merging_threshold = 0.8,   SFTpower = NULL,   cor_method = \"spearman\",   verbose = FALSE )"},{"path":"/reference/exp2gcn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reconstruct gene coexpression network from gene expression — exp2gcn","text":"exp gene expression data frame genes row names samples column names `SummarizedExperiment` object. net_type Network type. One 'signed', 'signed hybrid' 'unsigned'. Default: 'signed'. module_merging_threshold Correlation threshold merge similar modules single one. Default: 0.8. SFTpower SFT power generated function SFT_fit. cor_method Correlation method. One \"pearson\", \"biweight\" \"spearman\". Default \"spearman\". verbose Logical indicating whether display progress messages . Default: FALSE.","code":""},{"path":"/reference/exp2gcn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reconstruct gene coexpression network from gene expression — exp2gcn","text":"List containing: Adjacency matrix Data frame module eigengenes Data frame genes corresponding modules Data frame intramodular connectivity Correlation matrix Parameters used network reconstruction Objects plot dendrogram plot_dendro_and_colors.","code":""},{"path":[]},{"path":"/reference/exp2gcn.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Reconstruct gene coexpression network from gene expression — exp2gcn","text":"Fabricio Almeida-Silva","code":""},{"path":"/reference/exp2gcn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reconstruct gene coexpression network from gene expression — exp2gcn","text":"","code":"data(filt.se) # The SFT fit was previously calculated and the optimal power was 16 gcn <- exp2gcn(filt.se, SFTpower = 18, cor_method = \"pearson\") #> ..connectivity.. #> ..matrix multiplication (system BLAS).. #> ..normalization.. #> ..done."},{"path":"/reference/exp2grn.html","id":null,"dir":"Reference","previous_headings":"","what":"Infer gene regulatory network from expression data — exp2grn","title":"Infer gene regulatory network from expression data — exp2grn","text":"Infer gene regulatory network expression data","code":""},{"path":"/reference/exp2grn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Infer gene regulatory network from expression data — exp2grn","text":"","code":"exp2grn(   exp,   regulators = NULL,   eps = 0,   estimator_aracne = \"spearman\",   estimator_clr = \"pearson\",   remove_zero = TRUE,   nsplit = 10,   ... )"},{"path":"/reference/exp2grn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Infer gene regulatory network from expression data — exp2grn","text":"exp gene expression data frame genes row names samples column names `SummarizedExperiment` object. regulators character vector regulators (e.g., transcription factors miRNAs). regulators must included `exp`. eps Numeric value indicating threshold used removing edge: triplet nodes (,j,k), weakest edge, say (ij), removed weight min(ik),(jk) - eps. Default: 0. estimator_aracne Entropy estimator used ARACNE inference. One \"mi.empirical\", \"mi.mm\", \"mi.shrink\", \"mi.sg\", \"pearson\", \"spearman\", \"kendall\". Default: \"spearman\". estimator_clr Entropy estimator used CLR inference. One \"mi.empirical\", \"mi.mm\", \"mi.shrink\", \"mi.sg\", \"pearson\", \"spearman\", \"kendall\". Default: \"pearson\". remove_zero Logical indicating whether remove edges whose weight exactly zero. Zero values indicate edges removed ARACNE. Default: TRUE. nsplit Number groups edge list split. Default: 10. ... Additional arguments passed `GENIE3::GENIE3()`.","code":""},{"path":"/reference/exp2grn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Infer gene regulatory network from expression data — exp2grn","text":"filtered edge list regulators first column targets second column.","code":""},{"path":"/reference/exp2grn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Infer gene regulatory network from expression data — exp2grn","text":"function infers GRNs ARACNE, GENIE3 CLR, ranks correlation weights GRN calculates average rank edge. , resulting GRN filtered keep top n edges lead optimal scale-free topology fit.","code":""},{"path":"/reference/exp2grn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Infer gene regulatory network from expression data — exp2grn","text":"","code":"data(filt.se) tfs <- sample(rownames(filt.se), size=50, replace=FALSE) # Test with small number of trees for demonstration purpose grn <- exp2grn(filt.se, regulators = tfs, nTrees=2, nsplit=2) #> The top number of edges that best fits the scale-free topology is 278"},{"path":"/reference/exp_genes2orthogroups.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse gene-level expression data to orthogroup level — exp_genes2orthogroups","title":"Collapse gene-level expression data to orthogroup level — exp_genes2orthogroups","text":"given list expression data, function replaces genes corresponding orthogroups allow inter-species comparisons.","code":""},{"path":"/reference/exp_genes2orthogroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse gene-level expression data to orthogroup level — exp_genes2orthogroups","text":"","code":"exp_genes2orthogroups(explist = NULL, og = NULL, summarize = \"median\")"},{"path":"/reference/exp_genes2orthogroups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse gene-level expression data to orthogroup level — exp_genes2orthogroups","text":"explist List expression data frames SummarizedExperiment objects. og Data frame 3 columns corresponding orthogroup, species ID, gene ID, respectively. Species IDs must names expression list. summarize Centrality measure summarize multiple paralogous genes orthogroup. One \"median\" \"mean\". Default: \"median\".","code":""},{"path":"/reference/exp_genes2orthogroups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse gene-level expression data to orthogroup level — exp_genes2orthogroups","text":"List expression data frames species expression summarized orthogroup level.","code":""},{"path":"/reference/exp_genes2orthogroups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collapse gene-level expression data to orthogroup level — exp_genes2orthogroups","text":"","code":"# \\donttest{ data(og.zma.osa) data(zma.se) data(osa.se) explist <- list(zma = zma.se,                 osa = osa.se) og <- og.zma.osa exp_ortho <- exp_genes2orthogroups(explist, og, summarize = \"mean\") # }"},{"path":"/reference/exp_preprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess expression data for network reconstruction — exp_preprocess","title":"Preprocess expression data for network reconstruction — exp_preprocess","text":"Preprocess expression data network reconstruction","code":""},{"path":"/reference/exp_preprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess expression data for network reconstruction — exp_preprocess","text":"","code":"exp_preprocess(   exp,   NA_rm = TRUE,   replaceby = 0,   Zk_filtering = TRUE,   zk = -2,   cor_method = \"spearman\",   remove_nonexpressed = TRUE,   method = \"median\",   min_exp = 1,   min_percentage_samples = 0.25,   remove_confounders = TRUE,   variance_filter = FALSE,   n = NULL,   percentile = NULL,   vstransform = FALSE )"},{"path":"/reference/exp_preprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess expression data for network reconstruction — exp_preprocess","text":"exp gene expression data frame genes row names samples column names `SummarizedExperiment` object. NA_rm Logical. specifies whether remove missing values expression data frame . Default = TRUE. replaceby NA_rm TRUE, use instead NAs. One 0 'mean'. Default 0. Zk_filtering Logical. specifies whether filter outlying samples Zk . Default: TRUE. zk Zk_filtering TRUE, standardized connectivity threshold. Samples threshold considered outliers. Default -2. cor_method Zk_filtering TRUE, correlation method use. One 'spearman', 'bicor', 'pearson'. Default 'spearman'. remove_nonexpressed Logical. specifies whether non-expressed genes removed . Default TRUE. method remove_nonexpressed TRUE, criterion filter non-expressed genes . One \"mean\", \"median\", \"percentage\", \"allsamples\". Default 'median'. min_exp method 'mean', 'median', 'allsamples', minimum value gene considered expressed. method 'percentage', minimum value gene must least n percent samples considered expressed. min_percentage_samples method 'percentage', expressed genes must expression >= min_exp least percentage. Values must range 0 1. Default = 0.25. remove_confounders Logical. TRUE, removes principal components add noise data. variance_filter Logical. TRUE, filter genes variance. Default FALSE. n variance_filter TRUE, number variable genes keep. percentile variance_filter TRUE, percentage variable genes keep. vstransform Logical indicating data variance stabilizing transformed. parameter can set TRUE data matrix raw read counts.","code":""},{"path":"/reference/exp_preprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess expression data for network reconstruction — exp_preprocess","text":"Processed gene expression data frame gene IDs row names sample names column names `SummarizedExperiment` object.","code":""},{"path":"/reference/exp_preprocess.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Preprocess expression data for network reconstruction — exp_preprocess","text":"Love, M. ., Huber, W., & Anders, S. (2014). Moderated estimation fold change dispersion RNA-seq data DESeq2. Genome biology, 15(12), 1-21.","code":""},{"path":[]},{"path":"/reference/exp_preprocess.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Preprocess expression data for network reconstruction — exp_preprocess","text":"Fabricio Almeida-Silva","code":""},{"path":"/reference/exp_preprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess expression data for network reconstruction — exp_preprocess","text":"","code":"data(zma.se) exp <- exp_preprocess(zma.se, variance_filter=TRUE, n=1000) #> Number of removed samples: 1"},{"path":"/reference/filt.se.html","id":null,"dir":"Reference","previous_headings":"","what":"Filtered maize gene expression data from Shin et al., 2021. — filt.se","title":"Filtered maize gene expression data from Shin et al., 2021. — filt.se","text":"Filtered expression data transcripts per million (TPM) Shin et al., 2021. data set described zma.se, contains top 500 genes highest variances. data set created used unit tests examples.","code":""},{"path":"/reference/filt.se.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filtered maize gene expression data from Shin et al., 2021. — filt.se","text":"","code":"data(filt.se)"},{"path":"/reference/filt.se.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Filtered maize gene expression data from Shin et al., 2021. — filt.se","text":"object class SummarizedExperiment","code":""},{"path":"/reference/filt.se.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Filtered maize gene expression data from Shin et al., 2021. — filt.se","text":"Shin, J., Marx, H., Richards, ., Vaneechoutte, D., Jayaraman, D., Maeda, J., ... & Roy, S. (2021). network-based comparative framework study conservation divergence proteomes plant phylogenies. Nucleic Acids Research, 49(1), e3-e3.","code":""},{"path":"/reference/filt.se.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filtered maize gene expression data from Shin et al., 2021. — filt.se","text":"","code":"data(filt.se)"},{"path":"/reference/filter_by_variance.html","id":null,"dir":"Reference","previous_headings":"","what":"Keep only genes with the highest variances — filter_by_variance","title":"Keep only genes with the highest variances — filter_by_variance","text":"Keep genes highest variances","code":""},{"path":"/reference/filter_by_variance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep only genes with the highest variances — filter_by_variance","text":"","code":"filter_by_variance(exp, n = NULL, percentile = NULL)"},{"path":"/reference/filter_by_variance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keep only genes with the highest variances — filter_by_variance","text":"exp gene expression data frame genes row names samples column names `SummarizedExperiment` object. n Number variable genes (e.g., n=5000 keep top 5000 variable genes). percentile Percentile highly variable genes (e.g., percentile=0.1 keep top 10 percent variable genes). Values must range 0 1.","code":""},{"path":"/reference/filter_by_variance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Keep only genes with the highest variances — filter_by_variance","text":"Expression data frame `SummarizedExperiment` object variable genes row names samples column names.","code":""},{"path":"/reference/filter_by_variance.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Keep only genes with the highest variances — filter_by_variance","text":"Fabricio Almeida-Silva","code":""},{"path":"/reference/filter_by_variance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Keep only genes with the highest variances — filter_by_variance","text":"","code":"data(zma.se) filt_exp <- filter_by_variance(zma.se, p=0.1)"},{"path":"/reference/gene_significance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate gene significance for a given group of genes — gene_significance","title":"Calculate gene significance for a given group of genes — gene_significance","text":"Calculate gene significance given group genes","code":""},{"path":"/reference/gene_significance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate gene significance for a given group of genes — gene_significance","text":"","code":"gene_significance(   exp,   metadata,   genes = NULL,   alpha = 0.05,   min_cor = 0.2,   use_abs = TRUE,   palette = \"RdYlBu\",   show_rownames = FALSE,   continuous_trait = FALSE )"},{"path":"/reference/gene_significance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate gene significance for a given group of genes — gene_significance","text":"exp gene expression data frame genes row names samples column names `SummarizedExperiment` object. metadata data frame containing sample names row names sample annotation first column. Ignored `exp` `SummarizedExperiment` object, since function extract colData. genes Character vector genes correlated traits. given, genes `exp` considered. alpha Significance level. Default 0.05. min_cor Minimum correlation coefficient. Default 0.2. use_abs Logical indicating whether filter correlation using absolute value . TRUE, min_cor say 0.2 keep correlations 0.2 -0.2. Default TRUE. palette RColorBrewer's color palette use. Default \"RdYlBu\", palette ranging blue red. show_rownames Logical indicating whether show row names . Default FALSE. continuous_trait Logical indicating trait continuous variable. Default FALSE.","code":""},{"path":"/reference/gene_significance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate gene significance for a given group of genes — gene_significance","text":"heatmap gene significance (GS) list containing: filtered_corandpFiltered matrix correlation p-values raw_GSRaw matrix gene significances","code":""},{"path":[]},{"path":"/reference/gene_significance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate gene significance for a given group of genes — gene_significance","text":"","code":"data(filt.se) gs <- gene_significance(filt.se)"},{"path":"/reference/get_HK.html","id":null,"dir":"Reference","previous_headings":"","what":"Get housekeeping genes from global expression profile — get_HK","title":"Get housekeeping genes from global expression profile — get_HK","text":"Get housekeeping genes global expression profile","code":""},{"path":"/reference/get_HK.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get housekeeping genes from global expression profile — get_HK","text":"","code":"get_HK(exp)"},{"path":"/reference/get_HK.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get housekeeping genes from global expression profile — get_HK","text":"exp gene expression data frame genes row names samples column names `SummarizedExperiment` object.","code":""},{"path":"/reference/get_HK.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get housekeeping genes from global expression profile — get_HK","text":"Character vector housekeeping gene IDs.","code":""},{"path":"/reference/get_HK.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get housekeeping genes from global expression profile — get_HK","text":"function identifies housekeeping genes, broadly expressed genes low variation global scale across samples. cases, users want remove genes interesting coexpression network analyses. See references details.","code":""},{"path":"/reference/get_HK.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get housekeeping genes from global expression profile — get_HK","text":"Machado, F.B., Moharana, K.C., Almeida‐Silva, F., Gazara, R.K., Pedrosa‐Silva, F., Coelho, F.S., Grativol, C. Venancio, T.M. (2020), Systematic analysis 1298 RNA‐Seq samples construction comprehensive soybean (Glycine max) expression atlas. Plant J, 103: 1894-1909.","code":""},{"path":"/reference/get_HK.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get housekeeping genes from global expression profile — get_HK","text":"Fabricio Almeida-Silva","code":""},{"path":"/reference/get_HK.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get housekeeping genes from global expression profile — get_HK","text":"","code":"data(zma.se) hk <- get_HK(zma.se)"},{"path":"/reference/get_edge_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Get edge list from an adjacency matrix for a group of genes — get_edge_list","title":"Get edge list from an adjacency matrix for a group of genes — get_edge_list","text":"Get edge list adjacency matrix group genes","code":""},{"path":"/reference/get_edge_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get edge list from an adjacency matrix for a group of genes — get_edge_list","text":"","code":"get_edge_list(   net,   genes = NULL,   module = NULL,   filter = FALSE,   method = \"optimalSFT\",   r_optimal_test = seq(0.4, 0.9, by = 0.1),   Zcutoff = 1.96,   pvalue_cutoff = 0.05,   rcutoff = 0.7,   nSamples = NULL,   check_SFT = FALSE,   bp_param = BiocParallel::SerialParam() )"},{"path":"/reference/get_edge_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get edge list from an adjacency matrix for a group of genes — get_edge_list","text":"net List object returned exp2gcn. genes Character vector containing subset genes edges extracted. can ignored user wants extract edge list given module instead individual genes. module Character module name edges extracted. include 2 modules, input names character vector. filter Logical indicating whether filter edge list . method Method filter spurious correlations. One \"Zscore\", \"optimalSFT\", \"pvalue\" \"min_cor\". See details information methods. Default: 'optimalSFT' r_optimal_test Numeric vector correlation thresholds tested optimal scale-free topology fit. valid method equals \"optimalSFT\". Default: seq(0.4, 0.9, = 0.1) Zcutoff Minimum Z-score threshold. valid method equals \"Zscore\". Default: 1.96 pvalue_cutoff Maximum P-value threshold. valid method equals \"pvalue\". Default: 0.05 rcutoff Minimum correlation threshold. valid method equals \"min_cor\". Default: 0.7 nSamples Number samples data set correlation matrix calculated. required method equals \"pvalue\". check_SFT Logical indicating whether test resulting network close scale-free topology . Default: FALSE. bp_param BiocParallel back-end used. Default: BiocParallel::SerialParam()","code":""},{"path":"/reference/get_edge_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get edge list from an adjacency matrix for a group of genes — get_edge_list","text":"Data frame edge list input genes.","code":""},{"path":"/reference/get_edge_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get edge list from an adjacency matrix for a group of genes — get_edge_list","text":"default method (\"optimalSFT\") create several different edge lists filtering original correlation matrix thresholds specified r_optimal_test. , calculate scale-free topology fit index possible networks return network best fits scale-free topology. method \"Zscore\" apply Fisher Z-transformation correlation coefficients remove Z-scores threshold specified Zcutoff. method \"pvalue\" calculate Student asymptotic p-value correlations remove correlations whose p-values threshold specified pvalue_cutoff. method \"min_cor\" remove correlations minimum correlation threshold specified rcutoff.","code":""},{"path":[]},{"path":"/reference/get_edge_list.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get edge list from an adjacency matrix for a group of genes — get_edge_list","text":"Fabricio Almeida-Silva","code":""},{"path":"/reference/get_edge_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get edge list from an adjacency matrix for a group of genes — get_edge_list","text":"","code":"data(filt.se) gcn <- exp2gcn(filt.se, SFTpower = 18, cor_method = \"pearson\") #> ..connectivity.. #> ..matrix multiplication (system BLAS).. #> ..normalization.. #> ..done. genes <- rownames(filt.se)[1:50] edges <- get_edge_list(gcn, genes=genes, filter = FALSE)"},{"path":"/reference/get_hubs_gcn.html","id":null,"dir":"Reference","previous_headings":"","what":"Get GCN hubs — get_hubs_gcn","title":"Get GCN hubs — get_hubs_gcn","text":"Get GCN hubs","code":""},{"path":"/reference/get_hubs_gcn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get GCN hubs — get_hubs_gcn","text":"","code":"get_hubs_gcn(exp, net)"},{"path":"/reference/get_hubs_gcn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get GCN hubs — get_hubs_gcn","text":"exp gene expression data frame genes row names samples column names `SummarizedExperiment` object. net List object returned exp2gcn.","code":""},{"path":"/reference/get_hubs_gcn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get GCN hubs — get_hubs_gcn","text":"Data frame containing gene IDs, modules intramodular connectivity hubs.","code":""},{"path":[]},{"path":"/reference/get_hubs_gcn.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get GCN hubs — get_hubs_gcn","text":"Fabricio Almeida-Silva","code":""},{"path":"/reference/get_hubs_gcn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get GCN hubs — get_hubs_gcn","text":"","code":"data(filt.se) gcn <- exp2gcn(filt.se, SFTpower = 18, cor_method = \"pearson\") #> ..connectivity.. #> ..matrix multiplication (system BLAS).. #> ..normalization.. #> ..done. hubs <- get_hubs_gcn(filt.se, gcn)"},{"path":"/reference/get_hubs_grn.html","id":null,"dir":"Reference","previous_headings":"","what":"Get hubs for gene regulatory network — get_hubs_grn","title":"Get hubs for gene regulatory network — get_hubs_grn","text":"Get hubs gene regulatory network Get hubs protein-protein interaction network","code":""},{"path":"/reference/get_hubs_grn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get hubs for gene regulatory network — get_hubs_grn","text":"","code":"get_hubs_grn(   edgelist,   top_percentile = 0.1,   top_n = NULL,   return_degree = FALSE,   ranked = TRUE )  get_hubs_ppi(   edgelist,   top_percentile = 0.1,   top_n = NULL,   return_degree = FALSE )"},{"path":"/reference/get_hubs_grn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get hubs for gene regulatory network — get_hubs_grn","text":"edgelist protein-protein interaction network represented edge list. top_percentile Numeric 0 1 indicating percentage proteins highest degree consider hubs. Default: 0.1. top_n Numeric indicating number proteins highest degree consider hubs. return_degree Logical indicating whether return data frame degree proteins. TRUE, function return list instead data frame. Default: FALSE. ranked Logical indicating whether treat third column edge list (edge weights) ranked values. Ignored edge list contains 2 columns. Default: TRUE.","code":""},{"path":"/reference/get_hubs_grn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get hubs for gene regulatory network — get_hubs_grn","text":"data frame gene ID first column degree second column list two data frames hubs degree genes, respectively. data frame protein ID first column degree second column list two data frames hubs degree genes, respectively.","code":""},{"path":"/reference/get_hubs_grn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get hubs for gene regulatory network — get_hubs_grn","text":"","code":"data(filt.se) tfs <- sample(rownames(filt.se), size=50, replace=FALSE) grn_list <- grn_combined(filt.se, regulators=tfs, nTrees=2) ranked_grn <- grn_average_rank(grn_list) # split in only 2 groups for demonstration purposes filtered_edges <- grn_filter(ranked_grn, nsplit=2) #> The top number of edges that best fits the scale-free topology is 126  hubs <- get_hubs_grn(filtered_edges) ppi_edges <- igraph::get.edgelist(igraph::barabasi.game(n=500, directed=FALSE)) hubs <- get_hubs_ppi(ppi_edges, return_degree = TRUE)"},{"path":"/reference/get_neighbors.html","id":null,"dir":"Reference","previous_headings":"","what":"Get 1st-order neighbors of a given gene or group of genes — get_neighbors","title":"Get 1st-order neighbors of a given gene or group of genes — get_neighbors","text":"Get 1st-order neighbors given gene group genes","code":""},{"path":"/reference/get_neighbors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get 1st-order neighbors of a given gene or group of genes — get_neighbors","text":"","code":"get_neighbors(genes, net, cor_threshold = 0.7)"},{"path":"/reference/get_neighbors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get 1st-order neighbors of a given gene or group of genes — get_neighbors","text":"genes Character vector containing genes direct neighbors extracted. net List object returned exp2gcn. cor_threshold Correlation threshold filter connections. weighted network fully connected graph, cutoff must selected. Default 0.7.","code":""},{"path":"/reference/get_neighbors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get 1st-order neighbors of a given gene or group of genes — get_neighbors","text":"List containing 1st-order neighbors input gene.","code":""},{"path":[]},{"path":"/reference/get_neighbors.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get 1st-order neighbors of a given gene or group of genes — get_neighbors","text":"Fabricio Almeida-Silva","code":""},{"path":"/reference/get_neighbors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get 1st-order neighbors of a given gene or group of genes — get_neighbors","text":"","code":"data(filt.se) genes <- rownames(filt.se)[1:10] gcn <- exp2gcn(filt.se, SFTpower = 18, cor_method = \"pearson\") #> ..connectivity.. #> ..matrix multiplication (system BLAS).. #> ..normalization.. #> ..done. neighbors <- get_neighbors(genes, gcn)"},{"path":"/reference/grn_average_rank.html","id":null,"dir":"Reference","previous_headings":"","what":"Rank edge weights for GRNs and calculate average across different methods — grn_average_rank","title":"Rank edge weights for GRNs and calculate average across different methods — grn_average_rank","text":"Rank edge weights GRNs calculate average across different methods","code":""},{"path":"/reference/grn_average_rank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rank edge weights for GRNs and calculate average across different methods — grn_average_rank","text":"","code":"grn_average_rank(list_edges)"},{"path":"/reference/grn_average_rank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rank edge weights for GRNs and calculate average across different methods — grn_average_rank","text":"list_edges List containing edge lists returned function grn_combined.","code":""},{"path":"/reference/grn_average_rank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rank edge weights for GRNs and calculate average across different methods — grn_average_rank","text":"Edge list containing regulator, target mean rank algorithms.","code":""},{"path":"/reference/grn_average_rank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rank edge weights for GRNs and calculate average across different methods — grn_average_rank","text":"","code":"data(filt.se) tfs <- sample(rownames(filt.se), size=50, replace=FALSE) grn_list <- grn_combined(filt.se, regulators=tfs, nTrees=2) ranked_grn <- grn_average_rank(grn_list)"},{"path":"/reference/grn_combined.html","id":null,"dir":"Reference","previous_headings":"","what":"Infer gene regulatory network with multiple algorithms and combine results in a list — grn_combined","title":"Infer gene regulatory network with multiple algorithms and combine results in a list — grn_combined","text":"Infer gene regulatory network multiple algorithms combine results list","code":""},{"path":"/reference/grn_combined.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Infer gene regulatory network with multiple algorithms and combine results in a list — grn_combined","text":"","code":"grn_combined(   exp,   regulators = NULL,   eps = 0.1,   estimator_aracne = \"spearman\",   estimator_clr = \"pearson\",   remove_zero = TRUE,   ... )"},{"path":"/reference/grn_combined.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Infer gene regulatory network with multiple algorithms and combine results in a list — grn_combined","text":"exp gene expression data frame genes row names samples column names `SummarizedExperiment` object. regulators character vector regulators (e.g., transcription factors miRNAs). regulators must included `exp`. eps Numeric value indicating threshold used removing edge: triplet nodes (,j,k), weakest edge, say (ij), removed weight min(ik),(jk) - eps. Default: 0.1. estimator_aracne Entropy estimator used ARACNE inference. One \"mi.empirical\", \"mi.mm\", \"mi.shrink\", \"mi.sg\", \"pearson\", \"spearman\", \"kendall\". Default: \"spearman\". estimator_clr Entropy estimator used CLR inference. One \"mi.empirical\", \"mi.mm\", \"mi.shrink\", \"mi.sg\", \"pearson\", \"spearman\", \"kendall\". Default: \"pearson\". remove_zero Logical indicating whether remove edges whose weight exactly zero. Zero values indicate edges removed ARACNE. Default: TRUE. ... Additional arguments passed `GENIE3::GENIE3()`.","code":""},{"path":"/reference/grn_combined.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Infer gene regulatory network with multiple algorithms and combine results in a list — grn_combined","text":"list data frames representing edge lists. list element edge list specific method.","code":""},{"path":"/reference/grn_combined.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Infer gene regulatory network with multiple algorithms and combine results in a list — grn_combined","text":"","code":"data(filt.se) tfs <- sample(rownames(filt.se), size=50, replace=FALSE) grn_list <- grn_combined(filt.se, regulators=tfs, nTrees=2)"},{"path":"/reference/grn_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter a gene regulatory network based on optimal scale-free topology fit — grn_filter","title":"Filter a gene regulatory network based on optimal scale-free topology fit — grn_filter","text":"Filter gene regulatory network based optimal scale-free topology fit","code":""},{"path":"/reference/grn_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter a gene regulatory network based on optimal scale-free topology fit — grn_filter","text":"","code":"grn_filter(edgelist, nsplit = 10, bp_param = BiocParallel::SerialParam())"},{"path":"/reference/grn_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter a gene regulatory network based on optimal scale-free topology fit — grn_filter","text":"edgelist gene regulatory network represented edge list. nsplit Number groups edge list split. Default: 10. bp_param BiocParallel back-end used. Default: BiocParallel::SerialParam()","code":""},{"path":"/reference/grn_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter a gene regulatory network based on optimal scale-free topology fit — grn_filter","text":"edge list best fits scale-free topology.","code":""},{"path":"/reference/grn_filter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter a gene regulatory network based on optimal scale-free topology fit — grn_filter","text":"edge list split n groups scale-free topology fit tested subset edge list. instance, edge list 10000 rows used input, function test SFT fit top 1000 edges, top 2000 edges, whole edge list.","code":""},{"path":"/reference/grn_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter a gene regulatory network based on optimal scale-free topology fit — grn_filter","text":"","code":"data(filt.se) tfs <- sample(rownames(filt.se), size=50, replace=FALSE) grn_list <- grn_combined(filt.se, regulators=tfs, nTrees=2) ranked_grn <- grn_average_rank(grn_list) # split in only 2 groups for demonstration purposes filtered_edges <- grn_filter(ranked_grn, nsplit=2) #> The top number of edges that best fits the scale-free topology is 242"},{"path":"/reference/grn_infer.html","id":null,"dir":"Reference","previous_headings":"","what":"Infer gene regulatory network with one of three algorithms — grn_infer","title":"Infer gene regulatory network with one of three algorithms — grn_infer","text":"available algorithms Context Likelihood Relatedness (CLR), ARACNE, GENIE3.","code":""},{"path":"/reference/grn_infer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Infer gene regulatory network with one of three algorithms — grn_infer","text":"","code":"grn_infer(   exp,   regulators = NULL,   method = c(\"clr\", \"aracne\", \"genie3\"),   estimator_clr = \"pearson\",   estimator_aracne = \"spearman\",   eps = 0.1,   remove_zero = TRUE,   ... )"},{"path":"/reference/grn_infer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Infer gene regulatory network with one of three algorithms — grn_infer","text":"exp gene expression data frame genes row names samples column names `SummarizedExperiment` object. regulators character vector regulators (e.g., transcription factors miRNAs). regulators must included `exp`. method GRN inference algorithm used. One \"clr\", \"aracne\", \"genie3\". estimator_clr Entropy estimator used. One \"mi.empirical\", \"mi.mm\", \"mi.shrink\", \"mi.sg\", \"pearson\", \"spearman\", \"kendall\". Default: \"pearson\". estimator_aracne Entropy estimator used. One \"mi.empirical\", \"mi.mm\", \"mi.shrink\", \"mi.sg\", \"pearson\", \"spearman\", \"kendall\". Default: \"spearman\". eps Numeric value indicating threshold used removing edge: triplet nodes (,j,k), weakest edge, say (ij), removed weight min(ik),(jk) - eps. Default: 0.1. remove_zero Logical indicating whether remove edges whose weight exactly zero. Default: TRUE ... Additional arguments passed `GENIE3::GENIE3()`.","code":""},{"path":"/reference/grn_infer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Infer gene regulatory network with one of three algorithms — grn_infer","text":"gene regulatory network represented edge list.","code":""},{"path":"/reference/grn_infer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Infer gene regulatory network with one of three algorithms — grn_infer","text":"","code":"data(filt.se) tfs <- sample(rownames(filt.se), size=20, replace=FALSE) clr <- grn_infer(filt.se, method = \"clr\", regulators=tfs) aracne <- grn_infer(filt.se, method = \"aracne\", regulators=tfs) # only 2 trees for demonstration purposes genie3 <- grn_infer(filt.se, method = \"genie3\", regulators=tfs, nTrees=2)"},{"path":"/reference/is_singleton.html","id":null,"dir":"Reference","previous_headings":"","what":"Logical expression to check if gene or gene set is singleton or not — is_singleton","title":"Logical expression to check if gene or gene set is singleton or not — is_singleton","text":"Logical expression check gene gene set singleton ","code":""},{"path":"/reference/is_singleton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logical expression to check if gene or gene set is singleton or not — is_singleton","text":"","code":"is_singleton(genes, og)"},{"path":"/reference/is_singleton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logical expression to check if gene or gene set is singleton or not — is_singleton","text":"genes Character containing gene group genes evaluated. og Data frame 3 columns corresponding orthogroup, species ID, gene ID, respectively.","code":""},{"path":"/reference/is_singleton.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logical expression to check if gene or gene set is singleton or not — is_singleton","text":"Vector logical values indicating gene group genes singleton .","code":""},{"path":[]},{"path":"/reference/is_singleton.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Logical expression to check if gene or gene set is singleton or not — is_singleton","text":"Fabricio Almeida-Silva","code":""},{"path":"/reference/is_singleton.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logical expression to check if gene or gene set is singleton or not — is_singleton","text":"","code":"data(og.zma.osa) data(filt.se) genes <- tail(rownames(filt.se), n = 100) is_singleton(genes, og.zma.osa) #> Zm00001d042050 Zm00001d042084 Zm00001d042308 Zm00001d042453 Zm00001d042525  #>           TRUE           TRUE           TRUE           TRUE           TRUE  #> Zm00001d042730 Zm00001d042772 Zm00001d042935 Zm00001d042966 Zm00001d043170  #>           TRUE           TRUE           TRUE           TRUE           TRUE  #> Zm00001d043299 Zm00001d043382 Zm00001d043465 Zm00001d043606 Zm00001d043942  #>           TRUE           TRUE           TRUE           TRUE           TRUE  #> Zm00001d043998 Zm00001d044130 Zm00001d044228 Zm00001d044246 Zm00001d044287  #>           TRUE           TRUE           TRUE           TRUE           TRUE  #> Zm00001d044664 Zm00001d044685 Zm00001d044686 Zm00001d044747 Zm00001d045000  #>           TRUE           TRUE           TRUE           TRUE           TRUE  #> Zm00001d045025 Zm00001d045042 Zm00001d045139 Zm00001d045323 Zm00001d045431  #>           TRUE           TRUE           TRUE           TRUE           TRUE  #> Zm00001d045448 Zm00001d045544 Zm00001d045888 Zm00001d046378 Zm00001d046449  #>           TRUE           TRUE           TRUE           TRUE           TRUE  #> Zm00001d046555 Zm00001d046583 Zm00001d046767 Zm00001d047203 Zm00001d047253  #>           TRUE           TRUE           TRUE           TRUE           TRUE  #> Zm00001d047282 Zm00001d047296 Zm00001d047479 Zm00001d047581 Zm00001d047697  #>           TRUE           TRUE           TRUE           TRUE           TRUE  #> Zm00001d047707 Zm00001d047765 Zm00001d047787 Zm00001d048091 Zm00001d048201  #>           TRUE           TRUE           TRUE           TRUE           TRUE  #> Zm00001d048346 Zm00001d048368 Zm00001d048491 Zm00001d048611 Zm00001d048787  #>           TRUE           TRUE           TRUE           TRUE           TRUE  #> Zm00001d049099 Zm00001d049166 Zm00001d049239 Zm00001d049500 Zm00001d049541  #>           TRUE           TRUE           TRUE           TRUE           TRUE  #> Zm00001d049552 Zm00001d049641 Zm00001d049674 Zm00001d049790 Zm00001d049826  #>           TRUE           TRUE           TRUE           TRUE           TRUE  #> Zm00001d049933 Zm00001d050032 Zm00001d050100 Zm00001d050193 Zm00001d050375  #>           TRUE           TRUE           TRUE           TRUE           TRUE  #> Zm00001d050961 Zm00001d051001 Zm00001d051056 Zm00001d051420 Zm00001d051478  #>           TRUE           TRUE           TRUE           TRUE           TRUE  #> Zm00001d051543 Zm00001d051591 Zm00001d051595 Zm00001d051659 Zm00001d051685  #>           TRUE           TRUE           TRUE           TRUE           TRUE  #> Zm00001d052101 Zm00001d052216 Zm00001d052718 Zm00001d052720 Zm00001d052855  #>           TRUE           TRUE           TRUE           TRUE           TRUE  #> Zm00001d052885 Zm00001d053090 Zm00001d053103 Zm00001d053228 Zm00001d053239  #>           TRUE           TRUE           TRUE           TRUE           TRUE  #> Zm00001d053354 Zm00001d053593 Zm00001d053632 Zm00001d053633 Zm00001d053635  #>           TRUE           TRUE           TRUE           TRUE           TRUE  #> Zm00001d053636 Zm00001d053834 Zm00001d053838 Zm00001d053845 Zm00001d053863  #>           TRUE           TRUE           TRUE           TRUE           TRUE"},{"path":"/reference/modPres_WGCNA.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate module preservation between two expression data sets using WGCNA's algorithm — modPres_WGCNA","title":"Calculate module preservation between two expression data sets using WGCNA's algorithm — modPres_WGCNA","text":"Calculate module preservation two expression data sets using WGCNA's algorithm","code":""},{"path":"/reference/modPres_WGCNA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate module preservation between two expression data sets using WGCNA's algorithm — modPres_WGCNA","text":"","code":"modPres_WGCNA(explist, ref_net, nPerm = 200)"},{"path":"/reference/modPres_WGCNA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate module preservation between two expression data sets using WGCNA's algorithm — modPres_WGCNA","text":"explist List expression data frames SummarizedExperiment objects. ref_net Reference network object returned function exp2net. nPerm Number permutations module preservation statistics. must greater 1. Default: 200.","code":""},{"path":"/reference/modPres_WGCNA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate module preservation between two expression data sets using WGCNA's algorithm — modPres_WGCNA","text":"ggplot object module preservation statistics.","code":""},{"path":"/reference/modPres_WGCNA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate module preservation between two expression data sets using WGCNA's algorithm — modPres_WGCNA","text":"","code":"# \\donttest{ set.seed(1) data(og.zma.osa) data(zma.se) data(osa.se) explist <- list(Zma = zma.se, Osa = osa.se) og <- og.zma.osa exp_ortho <- exp_genes2orthogroups(explist, og, summarize = \"mean\") exp_ortho <- lapply(exp_ortho, function(x) filter_by_variance(x, n=1500)) # Previously calculated power powers <- c(13, 15) gcn_osa <- exp2gcn(exp_ortho$Osa, net_type = \"signed hybrid\",                    SFTpower = powers[1], cor_method = \"pearson\") #> ..connectivity.. #> ..matrix multiplication (system BLAS).. #> ..normalization.. #> ..done. explist <- exp_ortho ref_net <- gcn_osa # 5 permutations for demonstration purposes pres_wgcna <- modPres_WGCNA(explist, ref_net, nPerm=5) # }"},{"path":"/reference/modPres_netrep.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate module preservation between two expression data sets using NetRep's algorithm — modPres_netrep","title":"Calculate module preservation between two expression data sets using NetRep's algorithm — modPres_netrep","text":"Calculate module preservation two expression data sets using NetRep's algorithm","code":""},{"path":"/reference/modPres_netrep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate module preservation between two expression data sets using NetRep's algorithm — modPres_netrep","text":"","code":"modPres_netrep(   explist,   ref_net = NULL,   test_net = NULL,   nPerm = 1000,   nThreads = 1 )"},{"path":"/reference/modPres_netrep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate module preservation between two expression data sets using NetRep's algorithm — modPres_netrep","text":"explist List expression data frames SummarizedExperiment objects. ref_net Reference network object returned function exp2net. test_net Test network object returned function exp2net. nPerm Number permutations. Default: 1000 nThreads Number threads used parallel computing. Default: 1","code":""},{"path":"/reference/modPres_netrep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate module preservation between two expression data sets using NetRep's algorithm — modPres_netrep","text":"Output list NetRep::modulePreservation message user's standard output stating modules preserved.","code":""},{"path":[]},{"path":"/reference/modPres_netrep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate module preservation between two expression data sets using NetRep's algorithm — modPres_netrep","text":"","code":"# \\donttest{ set.seed(1) data(og.zma.osa) data(zma.se) data(osa.se) og <- og.zma.osa exp_ortho <- exp_genes2orthogroups(explist, og, summarize = \"mean\") #> Error in is(exp[[1]], \"SummarizedExperiment\"): object 'explist' not found exp_ortho <- lapply(exp_ortho, function(x) filter_by_variance(x, n=1500)) #> Error in lapply(exp_ortho, function(x) filter_by_variance(x, n = 1500)): object 'exp_ortho' not found # Previously calculated SFT powers powers <- c(13, 15) gcn_osa <- exp2gcn(exp_ortho$osa, net_type = \"signed hybrid\",                    SFTpower = powers[1], cor_method = \"pearson\") #> Error in is(exp, \"SummarizedExperiment\"): object 'exp_ortho' not found gcn_zma <- exp2gcn(exp_ortho$zma, net_type = \"signed hybrid\",                    SFTpower = powers[2], cor_method = \"pearson\") #> Error in is(exp, \"SummarizedExperiment\"): object 'exp_ortho' not found explist <- exp_ortho #> Error in eval(expr, envir, enclos): object 'exp_ortho' not found ref_net <- gcn_osa #> Error in eval(expr, envir, enclos): object 'gcn_osa' not found test_net <- gcn_zma #> Error in eval(expr, envir, enclos): object 'gcn_zma' not found # 10 permutations for demonstration purposes pres_netrep <- modPres_netrep(explist, ref_net, test_net,                               nPerm=10, nThreads = 2) #> Error in is(exp[[1]], \"SummarizedExperiment\"): object 'explist' not found # }"},{"path":"/reference/module_enrichment.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform enrichment analysis for coexpression network modules — module_enrichment","title":"Perform enrichment analysis for coexpression network modules — module_enrichment","text":"Perform enrichment analysis coexpression network modules","code":""},{"path":"/reference/module_enrichment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform enrichment analysis for coexpression network modules — module_enrichment","text":"","code":"module_enrichment(   net = NULL,   background_genes,   annotation,   column = NULL,   correction = \"BH\",   p = 0.05,   bp_param = BiocParallel::SerialParam() )"},{"path":"/reference/module_enrichment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform enrichment analysis for coexpression network modules — module_enrichment","text":"net List object returned exp2gcn. background_genes Character vector genes used background Fisher's Exact Test. annotation Annotation data frame genes first column functional annotation columns. data frame can exported Biomart similar databases. column Column columns annotation used enrichment. character numeric values column indices can used. users want supply one column, input character numeric vector. Default: columns annotation. correction Multiple testing correction method. One \"holm\", \"hochberg\", \"hommel\", \"bonferroni\", \"BH\", \"\", \"fdr\" \"none\". Default \"BH\". p P-value threshold. P-values threshold considered significant. Default 0.05. bp_param BiocParallel back-end used. Default: BiocParallel::SerialParam()","code":""},{"path":"/reference/module_enrichment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform enrichment analysis for coexpression network modules — module_enrichment","text":"data frame containing enriched terms, p-values, gene IDs module names.","code":""},{"path":"/reference/module_enrichment.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Perform enrichment analysis for coexpression network modules — module_enrichment","text":"Fabricio Almeida-Silva","code":""},{"path":"/reference/module_enrichment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform enrichment analysis for coexpression network modules — module_enrichment","text":"","code":"# \\donttest{ data(filt.se) data(zma.interpro) background <- rownames(filt.se) gcn <- exp2gcn(filt.se, SFTpower = 18, cor_method = \"pearson\") #> ..connectivity.. #> ..matrix multiplication (system BLAS).. #> ..normalization.. #> ..done. mod_enrich <- module_enrichment(gcn, background, zma.interpro, p=1) #> Enrichment analysis for module black... #> Enrichment analysis for module blue... #> Enrichment analysis for module brown... #> Enrichment analysis for module green... #> Enrichment analysis for module red... #> Enrichment analysis for module yellow... # }"},{"path":"/reference/module_preservation.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate network preservation between two expression data sets — module_preservation","title":"Calculate network preservation between two expression data sets — module_preservation","text":"Calculate network preservation two expression data sets","code":""},{"path":"/reference/module_preservation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate network preservation between two expression data sets — module_preservation","text":"","code":"module_preservation(   explist,   ref_net = NULL,   test_net = NULL,   algorithm = \"netrep\",   nPerm = 1000,   nThreads = 1 )"},{"path":"/reference/module_preservation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate network preservation between two expression data sets — module_preservation","text":"explist List SummarizedExperiment objects expression data frames genes (orthogroups) row names samples column names. ref_net Reference network object returned function exp2gcn. test_net Test network object returned function exp2gcn. algorithm Module preservation algorithm used. One 'netrep' (default, permutation-based) WGCNA. nPerm Number permutations. Default: 1000 nThreads Number threads used parallel computing. Default: 1","code":""},{"path":"/reference/module_preservation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate network preservation between two expression data sets — module_preservation","text":"list containing preservation statistics (netrep) ggplot object preservation statistics. See WGCNA::modulePreservation NetRep::modulePreservation info.","code":""},{"path":"/reference/module_preservation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate network preservation between two expression data sets — module_preservation","text":"","code":"# \\donttest{ set.seed(1) data(og.zma.osa) data(zma.se) data(osa.se) og <- og.zma.osa exp_ortho <- exp_genes2orthogroups(explist, og, summarize = \"mean\") #> Error in is(exp[[1]], \"SummarizedExperiment\"): object 'explist' not found exp_ortho <- lapply(exp_ortho, function(x) filter_by_variance(x, n=1500)) #> Error in lapply(exp_ortho, function(x) filter_by_variance(x, n = 1500)): object 'exp_ortho' not found # Previously calculated SFT powers powers <- c(13, 15) gcn_osa <- exp2gcn(exp_ortho$osa, net_type = \"signed hybrid\",                    SFTpower = powers[1], cor_method = \"pearson\") #> Error in is(exp, \"SummarizedExperiment\"): object 'exp_ortho' not found gcn_zma <- exp2gcn(exp_ortho$zma, net_type = \"signed hybrid\",                    SFTpower = powers[2], cor_method = \"pearson\") #> Error in is(exp, \"SummarizedExperiment\"): object 'exp_ortho' not found explist <- exp_ortho #> Error in eval(expr, envir, enclos): object 'exp_ortho' not found ref_net <- gcn_osa #> Error in eval(expr, envir, enclos): object 'gcn_osa' not found test_net <- gcn_zma #> Error in eval(expr, envir, enclos): object 'gcn_zma' not found # 10 permutations for demonstration purposes pres <- module_preservation(explist, ref_net, test_net, nPerm=10) #> Error in is(exp[[1]], \"SummarizedExperiment\"): object 'explist' not found # }"},{"path":"/reference/module_stability.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform module stability analysis — module_stability","title":"Perform module stability analysis — module_stability","text":"Perform module stability analysis","code":""},{"path":"/reference/module_stability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform module stability analysis — module_stability","text":"","code":"module_stability(exp, net, nRuns = 20)"},{"path":"/reference/module_stability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform module stability analysis — module_stability","text":"exp gene expression data frame genes row names samples column names `SummarizedExperiment` object. net List object returned exp2gcn. nRuns Number times resample. Default 20.","code":""},{"path":"/reference/module_stability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform module stability analysis — module_stability","text":"base plot module stability results.","code":""},{"path":[]},{"path":"/reference/module_stability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform module stability analysis — module_stability","text":"","code":"data(filt.se) filt <- filt.se[1:100, ] # reducing even further for testing purposes # The SFT fit was previously calculated and the optimal power was 16 gcn <- exp2gcn(filt, SFTpower = 16, cor_method = \"pearson\") #> ..connectivity.. #> ..matrix multiplication (system BLAS).. #> ..normalization.. #> ..done. # For simplicity, only 2 runs module_stability(exp = filt, net = gcn, nRuns = 2) #>  ...working on run 1 .. #>  ...working on run 2 .. #>  ...working on run 3 ..  #> NULL"},{"path":"/reference/module_trait_cor.html","id":null,"dir":"Reference","previous_headings":"","what":"Correlate module eigengenes to trait — module_trait_cor","title":"Correlate module eigengenes to trait — module_trait_cor","text":"Correlate module eigengenes trait","code":""},{"path":"/reference/module_trait_cor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correlate module eigengenes to trait — module_trait_cor","text":"","code":"module_trait_cor(   exp,   metadata,   MEs,   cor_method = \"spearman\",   transpose = FALSE,   palette = \"RdYlBu\",   continuous_trait = FALSE,   cex.lab.x = 0.6,   cex.lab.y = 0.6,   cex.text = 0.6 )"},{"path":"/reference/module_trait_cor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correlate module eigengenes to trait — module_trait_cor","text":"exp gene expression data frame genes row names samples column names `SummarizedExperiment` object. metadata data frame containing sample names row names sample annotation first column. Ignored `exp` `SummarizedExperiment` object, since function extract colData. MEs Module eigengenes. 2nd element result list generated function exp2gcn. cor_method Method calculate correlation. One 'pearson', 'spearman' 'kendall'. Default 'spearman'. transpose Logical indicating whether transpose heatmap . Default FALSE. palette RColorBrewer's color palette use. Default \"RdYlBu\", palette ranging blue red. continuous_trait Logical indicating trait continuous variable. Default FALSE. cex.lab.x Font size x axis labels. Default: 0.6. cex.lab.y Font size y axis labels. Default: 0.6. cex.text Font size numbers inside matrix. Default: 0.6.","code":""},{"path":"/reference/module_trait_cor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correlate module eigengenes to trait — module_trait_cor","text":"data frame correlation correlation p-values pair trait along heatmap.","code":""},{"path":"/reference/module_trait_cor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Correlate module eigengenes to trait — module_trait_cor","text":"Significance levels: 1 asterisk: significant alpha = 0.05. 2 asterisks: significant alpha = 0.01. 3 asterisks: significant alpha = 0.001. asterisk: significant.","code":""},{"path":"/reference/module_trait_cor.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Correlate module eigengenes to trait — module_trait_cor","text":"Fabricio Almeida-Silva","code":""},{"path":"/reference/module_trait_cor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Correlate module eigengenes to trait — module_trait_cor","text":"","code":"data(filt.se) gcn <- exp2gcn(filt.se, SFTpower = 18, cor_method = \"pearson\") #> ..connectivity.. #> ..matrix multiplication (system BLAS).. #> ..normalization.. #> ..done. module_trait_cor(filt.se, MEs=gcn$MEs)  #>          ME          trait         cor       pvalue #> 1   MEblack      endosperm  0.04893502 0.8046899232 #> 2   MEblack         pollen -0.66378688 0.0001176403 #> 3   MEblack whole_seedling  0.46542718 0.0125656351 #> 4    MEblue      endosperm  0.16637906 0.3974540244 #> 5    MEblue         pollen -0.66378688 0.0001176403 #> 6    MEblue whole_seedling  0.35904382 0.0606033588 #> 7   MEbrown      endosperm -0.13701805 0.4868888298 #> 8   MEbrown         pollen -0.28283093 0.1447479363 #> 9   MEbrown whole_seedling  0.34131326 0.0754805149 #> 10  MEgreen      endosperm -0.45998917 0.0137823482 #> 11  MEgreen         pollen  0.66378688 0.0001176403 #> 12  MEgreen whole_seedling -0.09308544 0.6375478658 #> 13   MEgrey      endosperm  0.40126715 0.0343138967 #> 14   MEgrey         pollen -0.66378688 0.0001176403 #> 15   MEgrey whole_seedling  0.14627711 0.4576358365 #> 16    MEred      endosperm -0.03914801 0.8432149823 #> 17    MEred         pollen -0.66378688 0.0001176403 #> 18    MEred whole_seedling  0.54521469 0.0026961680 #> 19 MEyellow      endosperm  0.04893502 0.8046899232 #> 20 MEyellow         pollen -0.66378688 0.0001176403 #> 21 MEyellow whole_seedling  0.46542718 0.0125656351"},{"path":"/reference/net_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate network statistics — net_stats","title":"Calculate network statistics — net_stats","text":"Calculate network statistics","code":""},{"path":"/reference/net_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate network statistics — net_stats","text":"","code":"net_stats(   adj_matrix = NULL,   net_type = c(\"gcn\", \"ppi\", \"grn\"),   calculate_additional = FALSE )"},{"path":"/reference/net_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate network statistics — net_stats","text":"adj_matrix Adjacency matrix represents network. net_type One \"gcn\" (gene coexpression network), \"ppi\" (protein-protein interaction), \"grn\" (gene regulatory network). calculate_additional Logical indicating whether calculate additional network statistics (betweenness closeness). Default FALSE.","code":""},{"path":"/reference/net_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate network statistics — net_stats","text":"list containing following elements: Connectivity ScaledConnectivity ClusterCoef MAR (gcn ) Density Centralization Heterogeneity (gcn ) Diameter Betweenness Closeness","code":""},{"path":[]},{"path":"/reference/net_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate network statistics — net_stats","text":"","code":"# \\donttest{ data(filt.se) set.seed(12) filt.se <- exp_preprocess(     filt.se, Zk_filtering = FALSE, variance_filter = TRUE, n = 200 ) gcn <- exp2gcn(     filt.se, SFTpower = 7, cor_method = \"pearson\", net_type = \"signed hybrid\" ) #> ..connectivity.. #> ..matrix multiplication (system BLAS).. #> ..normalization.. #> ..done. stats <- net_stats(gcn$adjacency_matrix, net_type = \"gcn\") # }"},{"path":"/reference/og.zma.osa.html","id":null,"dir":"Reference","previous_headings":"","what":"Orthogroups between maize and rice — og.zma.osa","title":"Orthogroups between maize and rice — og.zma.osa","text":"orthogroups downloaded PLAZA 4.0 Monocots database.","code":""},{"path":"/reference/og.zma.osa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Orthogroups between maize and rice — og.zma.osa","text":"","code":"data(og.zma.osa)"},{"path":"/reference/og.zma.osa.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Orthogroups between maize and rice — og.zma.osa","text":"3-column data frame orthogroups, species IDs gene IDs.","code":""},{"path":"/reference/og.zma.osa.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Orthogroups between maize and rice — og.zma.osa","text":"Van Bel, M., Diels, T., Vancaester, E., Kreft, L., Botzki, ., Van de Peer, Y., ... & Vandepoele, K. (2018). PLAZA 4.0: integrative resource functional, evolutionary comparative plant genomics. Nucleic acids research, 46(D1), D1190-D1196.","code":""},{"path":"/reference/og.zma.osa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Orthogroups between maize and rice — og.zma.osa","text":"","code":"data(og.zma.osa)"},{"path":"/reference/osa.se.html","id":null,"dir":"Reference","previous_headings":"","what":"Rice gene expression data from Shin et al., 2021. — osa.se","title":"Rice gene expression data from Shin et al., 2021. — osa.se","text":"Filtered expression data transcripts per million (TPM) Shin et al., 2021. Genes TPM values <5 60 removed reduce package size. expression data associated sample metadata stored SummarizedExperiment object.","code":""},{"path":"/reference/osa.se.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rice gene expression data from Shin et al., 2021. — osa.se","text":"","code":"data(osa.se)"},{"path":"/reference/osa.se.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Rice gene expression data from Shin et al., 2021. — osa.se","text":"object class SummarizedExperiment","code":""},{"path":"/reference/osa.se.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Rice gene expression data from Shin et al., 2021. — osa.se","text":"Shin, J., Marx, H., Richards, ., Vaneechoutte, D., Jayaraman, D., Maeda, J., ... & Roy, S. (2021). network-based comparative framework study conservation divergence proteomes plant phylogenies. Nucleic Acids Research, 49(1), e3-e3.","code":""},{"path":"/reference/osa.se.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rice gene expression data from Shin et al., 2021. — osa.se","text":"","code":"data(osa.se)"},{"path":"/reference/parse_orthofinder.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse orthogroups identified by OrthoFinder — parse_orthofinder","title":"Parse orthogroups identified by OrthoFinder — parse_orthofinder","text":"function converts orthogroups file named Orthogroups.tsv 3-column data frame can interpreted BioNERO.","code":""},{"path":"/reference/parse_orthofinder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse orthogroups identified by OrthoFinder — parse_orthofinder","text":"","code":"parse_orthofinder(file_path = NULL)"},{"path":"/reference/parse_orthofinder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse orthogroups identified by OrthoFinder — parse_orthofinder","text":"file_path Path Orthogroups/Orthogroups.tsv file generated OrthoFinder.","code":""},{"path":"/reference/parse_orthofinder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse orthogroups identified by OrthoFinder — parse_orthofinder","text":"3-column data frame orthogroups, species IDs gene IDs, respectively.","code":""},{"path":"/reference/parse_orthofinder.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Parse orthogroups identified by OrthoFinder — parse_orthofinder","text":"Fabricio Almeida-Silva","code":""},{"path":"/reference/parse_orthofinder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse orthogroups identified by OrthoFinder — parse_orthofinder","text":"","code":"path <- system.file(\"extdata\", \"Orthogroups.tsv\", package = \"BioNERO\") og <- parse_orthofinder(path)"},{"path":"/reference/plot_PCA.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Principal Component Analysis (PCA) of samples — plot_PCA","title":"Plot Principal Component Analysis (PCA) of samples — plot_PCA","text":"Plot Principal Component Analysis (PCA) samples","code":""},{"path":"/reference/plot_PCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Principal Component Analysis (PCA) of samples — plot_PCA","text":"","code":"plot_PCA(exp, metadata, log_trans = FALSE, PCs = \"1x2\", size = 2)"},{"path":"/reference/plot_PCA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Principal Component Analysis (PCA) of samples — plot_PCA","text":"exp gene expression data frame genes row names samples column names `SummarizedExperiment` object. metadata data frame containing sample names row names sample annotation first column. Ignored `exp` `SummarizedExperiment` object, since function extract colData. log_trans Logical. TRUE, expression data frame log transformed log2(exp+1). PCs Principal components plotted x-axis y-axis, respectively. One \"1x2\", \"1x3\" \"2x3. Default \"1x2\". size Numeric indicating point size. Default 2.","code":""},{"path":"/reference/plot_PCA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Principal Component Analysis (PCA) of samples — plot_PCA","text":"ggplot object PCA plot.","code":""},{"path":[]},{"path":"/reference/plot_PCA.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot Principal Component Analysis (PCA) of samples — plot_PCA","text":"Fabricio Almeida-Silva","code":""},{"path":"/reference/plot_PCA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Principal Component Analysis (PCA) of samples — plot_PCA","text":"","code":"data(zma.se) plot_PCA(zma.se, log_trans = TRUE)"},{"path":"/reference/plot_dendro_and_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot dendrogram of genes and modules — plot_dendro_and_colors","title":"Plot dendrogram of genes and modules — plot_dendro_and_colors","text":"Plot dendrogram genes modules","code":""},{"path":"/reference/plot_dendro_and_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot dendrogram of genes and modules — plot_dendro_and_colors","text":"","code":"plot_dendro_and_colors(gcn)"},{"path":"/reference/plot_dendro_and_colors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot dendrogram of genes and modules — plot_dendro_and_colors","text":"gcn List object returned exp2gcn.","code":""},{"path":"/reference/plot_dendro_and_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot dendrogram of genes and modules — plot_dendro_and_colors","text":"base plot gene dendrogram modules.","code":""},{"path":"/reference/plot_dendro_and_colors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot dendrogram of genes and modules — plot_dendro_and_colors","text":"","code":"data(filt.se) gcn <- exp2gcn(filt.se, SFTpower = 18, cor_method = \"pearson\") #> ..connectivity.. #> ..matrix multiplication (system BLAS).. #> ..normalization.. #> ..done. plot_dendro_and_colors(gcn)  #> NULL"},{"path":"/reference/plot_dendro_and_cons_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot dendrogram of genes and consensus modules — plot_dendro_and_cons_colors","title":"Plot dendrogram of genes and consensus modules — plot_dendro_and_cons_colors","text":"Plot dendrogram genes consensus modules","code":""},{"path":"/reference/plot_dendro_and_cons_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot dendrogram of genes and consensus modules — plot_dendro_and_cons_colors","text":"","code":"plot_dendro_and_cons_colors(consensus)"},{"path":"/reference/plot_dendro_and_cons_colors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot dendrogram of genes and consensus modules — plot_dendro_and_cons_colors","text":"consensus Consensus network returned consensus_modules.","code":""},{"path":"/reference/plot_dendro_and_cons_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot dendrogram of genes and consensus modules — plot_dendro_and_cons_colors","text":"base plot gene dendrogram modules.","code":""},{"path":"/reference/plot_dendro_and_cons_colors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot dendrogram of genes and consensus modules — plot_dendro_and_cons_colors","text":"","code":"set.seed(12) data(zma.se) filt.zma <- filter_by_variance(zma.se, n=500) zma.set1 <- filt.zma[, sample(colnames(filt.zma), size=20, replace=FALSE)] zma.set2 <- filt.zma[, sample(colnames(filt.zma), size=20, replace=FALSE)] list.sets <- list(zma.set1, zma.set2) # SFT power previously identified with consensus_SFT_fit() cons_mod <- consensus_modules(list.sets, power = c(11, 13),                               cor_method = \"pearson\") #> ..connectivity.. #> ..matrix multiplication (system BLAS).. #> ..normalization.. #> ..done. #> ..connectivity.. #> ..matrix multiplication (system BLAS).. #> ..normalization.. #> ..done. #>  ..done. #>  multiSetMEs: Calculating module MEs. #>    Working on set 1 ... #>    Working on set 2 ... plot_dendro_and_cons_colors(cons_mod)"},{"path":"/reference/plot_eigengene_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot eigengene network — plot_eigengene_network","title":"Plot eigengene network — plot_eigengene_network","text":"Plot eigengene network","code":""},{"path":"/reference/plot_eigengene_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot eigengene network — plot_eigengene_network","text":"","code":"plot_eigengene_network(gcn)"},{"path":"/reference/plot_eigengene_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot eigengene network — plot_eigengene_network","text":"gcn List object returned exp2gcn.","code":""},{"path":"/reference/plot_eigengene_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot eigengene network — plot_eigengene_network","text":"base plot eigengene network","code":""},{"path":"/reference/plot_eigengene_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot eigengene network — plot_eigengene_network","text":"","code":"data(filt.se) gcn <- exp2gcn(filt.se, SFTpower = 18, cor_method = \"pearson\") #> ..connectivity.. #> ..matrix multiplication (system BLAS).. #> ..normalization.. #> ..done. plot_eigengene_network(gcn)  #> NULL"},{"path":"/reference/plot_expression_profile.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot expression profile of given genes across samples — plot_expression_profile","title":"Plot expression profile of given genes across samples — plot_expression_profile","text":"Plot expression profile given genes across samples","code":""},{"path":"/reference/plot_expression_profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot expression profile of given genes across samples — plot_expression_profile","text":"","code":"plot_expression_profile(   genes,   exp,   metadata,   plot_module = TRUE,   net,   modulename )"},{"path":"/reference/plot_expression_profile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot expression profile of given genes across samples — plot_expression_profile","text":"genes Character vector containing subset genes edges extracted. can ignored plot_module TRUE. exp gene expression data frame genes row names samples column names `SummarizedExperiment` object. metadata data frame containing sample names row names sample annotation first column. Ignored `exp` `SummarizedExperiment` object, since function extract colData. plot_module Logical indicating whether plot whole module . set FALSE, genes must specified. net List object returned exp2net. modulename Name module plot.","code":""},{"path":"/reference/plot_expression_profile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot expression profile of given genes across samples — plot_expression_profile","text":"ggplot object showing expression profile genes across samples.","code":""},{"path":[]},{"path":"/reference/plot_expression_profile.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot expression profile of given genes across samples — plot_expression_profile","text":"Fabricio Almeida-Silva","code":""},{"path":"/reference/plot_expression_profile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot expression profile of given genes across samples — plot_expression_profile","text":"","code":"data(zma.se) data(filt.se) genes <- rownames(filt.se) plot_expression_profile(genes=genes, exp=zma.se, plot_module=FALSE)"},{"path":"/reference/plot_gcn.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot gene coexpression network from edge list — plot_gcn","title":"Plot gene coexpression network from edge list — plot_gcn","text":"Plot gene coexpression network edge list","code":""},{"path":"/reference/plot_gcn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot gene coexpression network from edge list — plot_gcn","text":"","code":"plot_gcn(   edgelist_gcn,   net,   color_by = \"module\",   hubs = NULL,   show_labels = \"tophubs\",   top_n_hubs = 5,   interactive = FALSE,   dim_interactive = c(600, 600) )"},{"path":"/reference/plot_gcn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot gene coexpression network from edge list — plot_gcn","text":"edgelist_gcn Data frame containing edge list GCN. edge list can generated get_edge_list(). net List object returned exp2net. color_by nodes colored? must either \"module\" (nodes colors modules) 2-column data frame containing genes first column custom gene annotation second column. Default: \"module\". hubs Data frame containing hub genes first column, modules second column, intramodular connectivity third column. show_labels Character indicating nodes labeled. One \"\", \"allhubs\", \"tophubs\", \"none\". Default: tophubs. top_n_hubs Number top hubs labeled. valid show_labels equals \"tophubs\". Default 5. interactive Logical indicating whether network interactive . Default FALSE. dim_interactive Numeric vector width height window interactive plotting. Default: c(600,600).","code":""},{"path":"/reference/plot_gcn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot gene coexpression network from edge list — plot_gcn","text":"ggplot object.","code":""},{"path":[]},{"path":"/reference/plot_gcn.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot gene coexpression network from edge list — plot_gcn","text":"Fabricio Almeida-Silva","code":""},{"path":"/reference/plot_gcn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot gene coexpression network from edge list — plot_gcn","text":"","code":"data(filt.se) gcn <- exp2gcn(filt.se, SFTpower = 18, cor_method = \"pearson\") #> ..connectivity.. #> ..matrix multiplication (system BLAS).. #> ..normalization.. #> ..done. gcn_edges <- get_edge_list(gcn, module=\"brown\", filter=TRUE,                            method=\"min_cor\") hubs <- get_hubs_gcn(filt.se, gcn) p <- plot_gcn(gcn_edges, gcn, hubs = hubs)"},{"path":"/reference/plot_grn.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot gene regulatory network from edge list — plot_grn","title":"Plot gene regulatory network from edge list — plot_grn","text":"Plot gene regulatory network edge list","code":""},{"path":"/reference/plot_grn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot gene regulatory network from edge list — plot_grn","text":"","code":"plot_grn(   edgelist_grn,   show_labels = \"tophubs\",   top_n_hubs = 5,   interactive = FALSE,   layout = igraph::with_kk,   arrow.gap = 0.01,   ranked = TRUE,   dim_interactive = c(600, 600) )"},{"path":"/reference/plot_grn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot gene regulatory network from edge list — plot_grn","text":"edgelist_grn Data frame containing edge list GRN network. First column TF second column target gene. columns interpreted edge attributes. show_labels Character indicating nodes labeled. One \"\", \"allhubs\", \"tophubs\", \"none\". top_n_hubs Number top hubs labeled. valid show_labels equals \"tophubs\". Default 5. interactive Logical indicating whether network interactive . Default FALSE. layout igraph function network layout. One with_dh, with_drl, with_gem, with_lgl, with_fr, with_graphopt, with_kk with_mds. Default with_kk. arrow.gap Numeric indicating distance nodes arrows. Default 0.2. ranked Logical indicating whether treat third column edge list (edge weights) ranked values. Default: TRUE. dim_interactive Numeric vector width height window interactive plotting. Default: c(600,600).","code":""},{"path":"/reference/plot_grn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot gene regulatory network from edge list — plot_grn","text":"ggplot object containing network.","code":""},{"path":[]},{"path":"/reference/plot_grn.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot gene regulatory network from edge list — plot_grn","text":"Fabricio Almeida-Silva","code":""},{"path":"/reference/plot_grn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot gene regulatory network from edge list — plot_grn","text":"","code":"data(filt.se) tfs <- sample(rownames(filt.se), size=50, replace=FALSE) grn_edges <- grn_infer(filt.se, method =\"clr\", regulators = tfs) p <- plot_grn(grn_edges, ranked=FALSE)"},{"path":"/reference/plot_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot heatmap of hierarchically clustered sample correlations or gene expression — plot_heatmap","title":"Plot heatmap of hierarchically clustered sample correlations or gene expression — plot_heatmap","text":"Plot heatmap hierarchically clustered sample correlations gene expression","code":""},{"path":"/reference/plot_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot heatmap of hierarchically clustered sample correlations or gene expression — plot_heatmap","text":"","code":"plot_heatmap(   exp,   col_metadata = NA,   row_metadata = NA,   cor_method = \"spearman\",   type = \"samplecor\",   palette = NULL,   log_trans = FALSE,   cluster_rows = TRUE,   cluster_cols = TRUE,   show_rownames = FALSE,   show_colnames = TRUE,   scale = \"none\",   fontsize = 9,   cutree_rows = NA,   cutree_cols = NA,   ... )"},{"path":"/reference/plot_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot heatmap of hierarchically clustered sample correlations or gene expression — plot_heatmap","text":"exp gene expression data frame genes row names samples column names `SummarizedExperiment` object. col_metadata data frame containing sample names row names sample annotation subsequent columns. maximum number columns 2 ensure legends can visualized. Ignored `exp` `SummarizedExperiment` object, since function extract colData. Default: NA. row_metadata data frame containing gene IDs row names gene functional classification first column. one column allowed ensure legends can visualized. Default: NA. cor_method Correlation method. One 'spearman' 'pearson'. Default 'spearman'. type Type heatmap plot. One 'samplecor' (sample correlations) 'expr'. Default: 'samplecor'. palette RColorBrewer palette use. Default \"Blues\" sample correlation heatmap \"YlOrRd\" gene expression heatmap. log_trans Logical indicating whether log transform expression data . Default: FALSE. cluster_rows Logical indicating whether cluster rows . Default: TRUE. cluster_cols Logical indicating whether cluster columns . Default: TRUE. show_rownames Logical indicating whether show row names . Default: FALSE. show_colnames Logical indicating whether show column names . Default TRUE. scale Character indicating values centered scaled rows, columns, none. One 'row', 'column', 'none'. Default: 'none'. fontsize Base font size plot. cutree_rows Number clusters rows divided. Default: NA (division). cutree_cols Number clusters columns divided. Default: NA (division). ... Additional arguments passed ComplexHeatmap::pheatmap().","code":""},{"path":"/reference/plot_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot heatmap of hierarchically clustered sample correlations or gene expression — plot_heatmap","text":"heatmap sample correlations gene expression.","code":""},{"path":[]},{"path":"/reference/plot_heatmap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot heatmap of hierarchically clustered sample correlations or gene expression — plot_heatmap","text":"Fabricio Almeida-Silva","code":""},{"path":"/reference/plot_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot heatmap of hierarchically clustered sample correlations or gene expression — plot_heatmap","text":"","code":"# \\donttest{ data(filt.se) plot_heatmap(filt.se)  # }"},{"path":"/reference/plot_ngenes_per_module.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot number of genes per module — plot_ngenes_per_module","title":"Plot number of genes per module — plot_ngenes_per_module","text":"Plot number genes per module","code":""},{"path":"/reference/plot_ngenes_per_module.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot number of genes per module — plot_ngenes_per_module","text":"","code":"plot_ngenes_per_module(net = NULL)"},{"path":"/reference/plot_ngenes_per_module.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot number of genes per module — plot_ngenes_per_module","text":"net List object returned exp2gcn.","code":""},{"path":"/reference/plot_ngenes_per_module.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot number of genes per module — plot_ngenes_per_module","text":"ggplot object bar plot gene number module.","code":""},{"path":"/reference/plot_ngenes_per_module.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot number of genes per module — plot_ngenes_per_module","text":"","code":"data(filt.se) gcn <- exp2gcn(filt.se, SFTpower = 18, cor_method = \"pearson\") #> ..connectivity.. #> ..matrix multiplication (system BLAS).. #> ..normalization.. #> ..done. plot_ngenes_per_module(gcn)"},{"path":"/reference/plot_ppi.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot protein-protein interaction network from edge list — plot_ppi","title":"Plot protein-protein interaction network from edge list — plot_ppi","text":"Plot protein-protein interaction network edge list","code":""},{"path":"/reference/plot_ppi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot protein-protein interaction network from edge list — plot_ppi","text":"","code":"plot_ppi(   edgelist_int,   color_by = \"community\",   clustering_method = igraph::cluster_infomap,   show_labels = \"tophubs\",   top_n_hubs = 5,   interactive = FALSE,   add_color_legend = TRUE,   dim_interactive = c(600, 600) )"},{"path":"/reference/plot_ppi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot protein-protein interaction network from edge list — plot_ppi","text":"edgelist_int Data frame containing edge list PPI network. First column protein 1 second column protein 2. columns interpreted edge attributes. color_by nodes colored? must either \"community\" 2-column data frame containing proteins first column custom annotation second column. \"community\", clustering algorithm applied. Default: \"community\". clustering_method igraph function used community detection. Available functions cluster_infomap, cluster_edge_betweenness, cluster_fast_greedy, cluster_walktrap, cluster_spinglass, cluster_leading_eigen, cluster_louvain, cluster_label_prop. Default cluster_infomap. show_labels Character indicating nodes labeled. One \"\", \"allhubs\", \"tophubs\", \"none\". top_n_hubs Number top hubs labeled. valid show_labels equals \"tophubs\". Default 5. interactive Logical indicating whether network interactive . Default FALSE. add_color_legend Logical indicating whether add color legend nodes. Default: TRUE. dim_interactive Numeric vector width height window interactive plotting. Default: c(600,600).","code":""},{"path":"/reference/plot_ppi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot protein-protein interaction network from edge list — plot_ppi","text":"ggplot object.","code":""},{"path":[]},{"path":"/reference/plot_ppi.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot protein-protein interaction network from edge list — plot_ppi","text":"Fabricio Almeida-Silva","code":""},{"path":"/reference/plot_ppi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot protein-protein interaction network from edge list — plot_ppi","text":"","code":"ppi_edges <- igraph::get.edgelist(igraph::barabasi.game(n=50, directed=FALSE)) p <- plot_ppi(ppi_edges, add_color_legend = FALSE)"},{"path":"/reference/q_normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantile normalize the expression data — q_normalize","title":"Quantile normalize the expression data — q_normalize","text":"Quantile normalize expression data","code":""},{"path":"/reference/q_normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantile normalize the expression data — q_normalize","text":"","code":"q_normalize(exp)"},{"path":"/reference/q_normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantile normalize the expression data — q_normalize","text":"exp gene expression data frame genes row names samples column names.","code":""},{"path":"/reference/q_normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quantile normalize the expression data — q_normalize","text":"Expression matrix normalized values","code":""},{"path":"/reference/q_normalize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quantile normalize the expression data — q_normalize","text":"","code":"data(zma.se) exp <- SummarizedExperiment::assay(zma.se) norm_exp <- q_normalize(exp)"},{"path":"/reference/remove_nonexp.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove genes that are not expressed based on a user-defined threshold — remove_nonexp","title":"Remove genes that are not expressed based on a user-defined threshold — remove_nonexp","text":"Remove genes expressed based user-defined threshold","code":""},{"path":"/reference/remove_nonexp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove genes that are not expressed based on a user-defined threshold — remove_nonexp","text":"","code":"remove_nonexp(   exp,   method = \"median\",   min_exp = 1,   min_percentage_samples = 0.25 )"},{"path":"/reference/remove_nonexp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove genes that are not expressed based on a user-defined threshold — remove_nonexp","text":"exp gene expression data frame genes row names samples column names `SummarizedExperiment` object. method Criterion filter non-expressed genes . One \"mean\", \"median\", \"percentage\", \"allsamples\". Default \"median\". min_exp method 'mean', 'median', 'allsamples', minimum value gene considered expressed. method 'percentage', minimum value gene must least n percent samples considered expressed. min_percentage_samples case user chooses 'percentage' method, expressed genes must expression >= min_exp least percentage. Values must range 0 1.","code":""},{"path":"/reference/remove_nonexp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove genes that are not expressed based on a user-defined threshold — remove_nonexp","text":"Filtered gene expression data frame `SummarizedExperiment` object.","code":""},{"path":[]},{"path":"/reference/remove_nonexp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Remove genes that are not expressed based on a user-defined threshold — remove_nonexp","text":"Fabricio Almeida-Silva","code":""},{"path":"/reference/remove_nonexp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove genes that are not expressed based on a user-defined threshold — remove_nonexp","text":"","code":"data(zma.se) filt_exp <- remove_nonexp(zma.se, min_exp = 5)"},{"path":"/reference/replace_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove missing values in a gene expression data frame — replace_na","title":"Remove missing values in a gene expression data frame — replace_na","text":"Remove missing values gene expression data frame","code":""},{"path":"/reference/replace_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove missing values in a gene expression data frame — replace_na","text":"","code":"replace_na(exp, replaceby = 0)"},{"path":"/reference/replace_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove missing values in a gene expression data frame — replace_na","text":"exp gene expression data frame genes row names samples column names `SummarizedExperiment` object. replaceby use instead NAs. One 0 'mean'. Default 0.","code":""},{"path":"/reference/replace_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove missing values in a gene expression data frame — replace_na","text":"Gene expression data frame `SummarizedExperiment` object NAs replaced according argument 'replaceby'.","code":""},{"path":"/reference/replace_na.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Remove missing values in a gene expression data frame — replace_na","text":"Fabricio Almeida-Silva","code":""},{"path":"/reference/replace_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove missing values in a gene expression data frame — replace_na","text":"","code":"data(zma.se) exp <- replace_na(zma.se) sum(is.na(exp)) #> [1] 0"},{"path":"/reference/zma.interpro.html","id":null,"dir":"Reference","previous_headings":"","what":"Maize Interpro annotation — zma.interpro","title":"Maize Interpro annotation — zma.interpro","text":"Interpro protein domain annotation retrieved PLAZA Monocots 4.0 database. genes included zma.se present subset.","code":""},{"path":"/reference/zma.interpro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maize Interpro annotation — zma.interpro","text":"","code":"data(zma.interpro)"},{"path":"/reference/zma.interpro.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Maize Interpro annotation — zma.interpro","text":"2-column data frame containing gene IDs associated Interpro annotations.","code":""},{"path":"/reference/zma.interpro.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Maize Interpro annotation — zma.interpro","text":"Van Bel, M., Diels, T., Vancaester, E., Kreft, L., Botzki, ., Van de Peer, Y., ... & Vandepoele, K. (2018). PLAZA 4.0: integrative resource functional, evolutionary comparative plant genomics. Nucleic acids research, 46(D1), D1190-D1196.","code":""},{"path":"/reference/zma.interpro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maize Interpro annotation — zma.interpro","text":"","code":"data(zma.interpro)"},{"path":"/reference/zma.se.html","id":null,"dir":"Reference","previous_headings":"","what":"Maize gene expression data from Shin et al., 2021. — zma.se","title":"Maize gene expression data from Shin et al., 2021. — zma.se","text":"Filtered expression data transcripts per million (TPM) Shin et al., 2021. Genes TPM values <5 60 removed reduce package size. expression data associated sample metadata stored SummarizedExperiment object.","code":""},{"path":"/reference/zma.se.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maize gene expression data from Shin et al., 2021. — zma.se","text":"","code":"data(zma.se)"},{"path":"/reference/zma.se.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Maize gene expression data from Shin et al., 2021. — zma.se","text":"object class SummarizedExperiment","code":""},{"path":"/reference/zma.se.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Maize gene expression data from Shin et al., 2021. — zma.se","text":"Shin, J., Marx, H., Richards, ., Vaneechoutte, D., Jayaraman, D., Maeda, J., ... & Roy, S. (2021). network-based comparative framework study conservation divergence proteomes plant phylogenies. Nucleic Acids Research, 49(1), e3-e3.","code":""},{"path":"/reference/zma.se.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maize gene expression data from Shin et al., 2021. — zma.se","text":"","code":"data(zma.se)"},{"path":"/reference/zma.tfs.html","id":null,"dir":"Reference","previous_headings":"","what":"Maize transcription factors — zma.tfs","title":"Maize transcription factors — zma.tfs","text":"Transcription factors families downloaded PlantTFDB 4.0.","code":""},{"path":"/reference/zma.tfs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maize transcription factors — zma.tfs","text":"","code":"data(zma.tfs)"},{"path":"/reference/zma.tfs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Maize transcription factors — zma.tfs","text":"data frame gene IDs TFs associated families.","code":""},{"path":"/reference/zma.tfs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Maize transcription factors — zma.tfs","text":"Jin, J., Tian, F., Yang, D. C., Meng, Y. Q., Kong, L., Luo, J., & Gao, G. (2016). PlantTFDB 4.0: toward central hub transcription factors regulatory interactions plants. Nucleic acids research, gkw982.","code":""},{"path":"/reference/zma.tfs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maize transcription factors — zma.tfs","text":"","code":"data(zma.tfs)"},{"path":"/news/index.html","id":"bionero-0990-2021-03-05","dir":"Changelog","previous_headings":"","what":"BioNERO 0.99.0 (2021-03-05)","title":"BioNERO 0.99.0 (2021-03-05)","text":"Submitted package Bioconductor.","code":""}]
